// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package FTSORewardManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// rmMetaData contains all meta data concerning the rm contract.
var rmMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"name\":\"_feePercentageUpdateOffset\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_defaultFeePercentage\",\"internalType\":\"uint256\"}]},{\"type\":\"event\",\"name\":\"DailyAuthorizedInflationSet\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"authorizedAmountWei\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FeePercentageChanged\",\"inputs\":[{\"type\":\"address\",\"name\":\"dataProvider\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"internalType\":\"uint256\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"validFromEpoch\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"GovernanceProposed\",\"inputs\":[{\"type\":\"address\",\"name\":\"proposedGovernance\",\"internalType\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"GovernanceUpdated\",\"inputs\":[{\"type\":\"address\",\"name\":\"oldGovernance\",\"internalType\":\"address\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newGoveranance\",\"internalType\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InflationReceived\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"amountReceivedWei\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardClaimed\",\"inputs\":[{\"type\":\"address\",\"name\":\"dataProvider\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"whoClaimed\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"sentTo\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"rewardEpoch\",\"internalType\":\"uint256\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"amount\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardClaimsExpired\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"rewardEpochId\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardsDistributed\",\"inputs\":[{\"type\":\"address\",\"name\":\"ftso\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"epochId\",\"internalType\":\"uint256\",\"indexed\":false},{\"type\":\"address[]\",\"name\":\"addresses\",\"internalType\":\"address[]\",\"indexed\":false},{\"type\":\"uint256[]\",\"name\":\"rewards\",\"internalType\":\"uint256[]\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"activate\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"name\":\"active\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"claimGovernance\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"_rewardAmount\",\"internalType\":\"uint256\"}],\"name\":\"claimReward\",\"inputs\":[{\"type\":\"address\",\"name\":\"_recipient\",\"internalType\":\"addresspayable\"},{\"type\":\"uint256[]\",\"name\":\"_rewardEpochs\",\"internalType\":\"uint256[]\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"_rewardAmount\",\"internalType\":\"uint256\"}],\"name\":\"claimRewardFromDataProviders\",\"inputs\":[{\"type\":\"address\",\"name\":\"_recipient\",\"internalType\":\"addresspayable\"},{\"type\":\"uint256[]\",\"name\":\"_rewardEpochs\",\"internalType\":\"uint256[]\"},{\"type\":\"address[]\",\"name\":\"_dataProviders\",\"internalType\":\"address[]\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"closeExpiredRewardEpoch\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"dailyAuthorizedInflation\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"deactivate\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"defaultFeePercentage\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"distributeRewards\",\"inputs\":[{\"type\":\"address[]\",\"name\":\"_addresses\",\"internalType\":\"address[]\"},{\"type\":\"uint256[]\",\"name\":\"_weights\",\"internalType\":\"uint256[]\"},{\"type\":\"uint256\",\"name\":\"_totalWeight\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_epochId\",\"internalType\":\"uint256\"},{\"type\":\"address\",\"name\":\"_ftso\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"name\":\"_priceEpochDurationSeconds\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_currentRewardEpoch\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_priceEpochEndTime\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_votePowerBlock\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"feePercentageUpdateOffset\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractIIFtsoManager\"}],\"name\":\"ftsoManager\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"bool\",\"name\":\"_claimed\",\"internalType\":\"bool\"},{\"type\":\"uint256\",\"name\":\"_amount\",\"internalType\":\"uint256\"}],\"name\":\"getClaimedReward\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\"},{\"type\":\"address\",\"name\":\"_dataProvider\",\"internalType\":\"address\"},{\"type\":\"address\",\"name\":\"_claimer\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getDataProviderCurrentFeePercentage\",\"inputs\":[{\"type\":\"address\",\"name\":\"_dataProvider\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256[]\",\"name\":\"_feePercentageBIPS\",\"internalType\":\"uint256[]\"},{\"type\":\"uint256[]\",\"name\":\"_validFromEpoch\",\"internalType\":\"uint256[]\"},{\"type\":\"bool[]\",\"name\":\"_fixed\",\"internalType\":\"bool[]\"}],\"name\":\"getDataProviderScheduledFeePercentageChanges\",\"inputs\":[{\"type\":\"address\",\"name\":\"_dataProvider\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"_totalReward\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_claimedReward\",\"internalType\":\"uint256\"}],\"name\":\"getEpochReward\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"_startEpochId\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_endEpochId\",\"internalType\":\"uint256\"}],\"name\":\"getEpochsWithClaimableRewards\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256[]\",\"name\":\"_epochIds\",\"internalType\":\"uint256[]\"}],\"name\":\"getEpochsWithUnclaimedRewards\",\"inputs\":[{\"type\":\"address\",\"name\":\"_beneficiary\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"getInflationAddress\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getRewardEpochToExpireNext\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address[]\",\"name\":\"_dataProviders\",\"internalType\":\"address[]\"},{\"type\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"internalType\":\"uint256[]\"},{\"type\":\"bool[]\",\"name\":\"_claimed\",\"internalType\":\"bool[]\"},{\"type\":\"bool\",\"name\":\"_claimable\",\"internalType\":\"bool\"}],\"name\":\"getStateOfRewards\",\"inputs\":[{\"type\":\"address\",\"name\":\"_beneficiary\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"internalType\":\"uint256[]\"},{\"type\":\"bool[]\",\"name\":\"_claimed\",\"internalType\":\"bool[]\"},{\"type\":\"bool\",\"name\":\"_claimable\",\"internalType\":\"bool\"}],\"name\":\"getStateOfRewardsFromDataProviders\",\"inputs\":[{\"type\":\"address\",\"name\":\"_beneficiary\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\"},{\"type\":\"address[]\",\"name\":\"_dataProviders\",\"internalType\":\"address[]\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"_foundationAllocatedFundsWei\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_totalInflationAuthorizedWei\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_totalClaimedWei\",\"internalType\":\"uint256\"}],\"name\":\"getTokenPoolSupplyData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"_amount\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_weight\",\"internalType\":\"uint256\"}],\"name\":\"getUnclaimedReward\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\"},{\"type\":\"address\",\"name\":\"_dataProvider\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"governance\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"initialise\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"lastInflationAuthorizationReceivedTs\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"proposeGovernance\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"proposedGovernance\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"payable\",\"outputs\":[],\"name\":\"receiveInflation\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setContractAddresses\",\"inputs\":[{\"type\":\"address\",\"name\":\"_inflation\",\"internalType\":\"address\"},{\"type\":\"address\",\"name\":\"_ftsoManager\",\"internalType\":\"contractIIFtsoManager\"},{\"type\":\"address\",\"name\":\"_wNat\",\"internalType\":\"contractWNat\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setDailyAuthorizedInflation\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_toAuthorizeWei\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"setDataProviderFeePercentage\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_feePercentageBIPS\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"totalAwardedWei\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"totalClaimedWei\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"totalExpiredWei\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"totalInflationAuthorizedWei\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"totalInflationReceivedWei\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"totalSelfDestructReceivedWei\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"transferGovernance\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractWNat\"}],\"name\":\"wNat\",\"inputs\":[]}]",
	Bin: "",
}

// rmABI is the input ABI used to generate the binding from.
// Deprecated: Use rmMetaData.ABI instead.
var rmABI = rmMetaData.ABI

// rmBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use rmMetaData.Bin instead.
var rmBin = rmMetaData.Bin

// Deployrm deploys a new Ethereum contract, binding an instance of rm to it.
func Deployrm(auth *bind.TransactOpts, backend bind.ContractBackend, _governance common.Address, _feePercentageUpdateOffset *big.Int, _defaultFeePercentage *big.Int) (common.Address, *types.Transaction, *rm, error) {
	parsed, err := rmMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(rmBin), backend, _governance, _feePercentageUpdateOffset, _defaultFeePercentage)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &rm{rmCaller: rmCaller{contract: contract}, rmTransactor: rmTransactor{contract: contract}, rmFilterer: rmFilterer{contract: contract}}, nil
}

// rm is an auto generated Go binding around an Ethereum contract.
type rm struct {
	rmCaller     // Read-only binding to the contract
	rmTransactor // Write-only binding to the contract
	rmFilterer   // Log filterer for contract events
}

// rmCaller is an auto generated read-only Go binding around an Ethereum contract.
type rmCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// rmTransactor is an auto generated write-only Go binding around an Ethereum contract.
type rmTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// rmFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type rmFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// rmSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type rmSession struct {
	Contract     *rm               // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// rmCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type rmCallerSession struct {
	Contract *rmCaller     // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// rmTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type rmTransactorSession struct {
	Contract     *rmTransactor     // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// rmRaw is an auto generated low-level Go binding around an Ethereum contract.
type rmRaw struct {
	Contract *rm // Generic contract binding to access the raw methods on
}

// rmCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type rmCallerRaw struct {
	Contract *rmCaller // Generic read-only contract binding to access the raw methods on
}

// rmTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type rmTransactorRaw struct {
	Contract *rmTransactor // Generic write-only contract binding to access the raw methods on
}

// Newrm creates a new instance of rm, bound to a specific deployed contract.
func Newrm(address common.Address, backend bind.ContractBackend) (*rm, error) {
	contract, err := bindrm(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &rm{rmCaller: rmCaller{contract: contract}, rmTransactor: rmTransactor{contract: contract}, rmFilterer: rmFilterer{contract: contract}}, nil
}

// NewrmCaller creates a new read-only instance of rm, bound to a specific deployed contract.
func NewrmCaller(address common.Address, caller bind.ContractCaller) (*rmCaller, error) {
	contract, err := bindrm(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &rmCaller{contract: contract}, nil
}

// NewrmTransactor creates a new write-only instance of rm, bound to a specific deployed contract.
func NewrmTransactor(address common.Address, transactor bind.ContractTransactor) (*rmTransactor, error) {
	contract, err := bindrm(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &rmTransactor{contract: contract}, nil
}

// NewrmFilterer creates a new log filterer instance of rm, bound to a specific deployed contract.
func NewrmFilterer(address common.Address, filterer bind.ContractFilterer) (*rmFilterer, error) {
	contract, err := bindrm(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &rmFilterer{contract: contract}, nil
}

// bindrm binds a generic wrapper to an already deployed contract.
func bindrm(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(rmABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_rm *rmRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _rm.Contract.rmCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_rm *rmRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _rm.Contract.rmTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_rm *rmRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _rm.Contract.rmTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_rm *rmCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _rm.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_rm *rmTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _rm.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_rm *rmTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _rm.Contract.contract.Transact(opts, method, params...)
}

// Active is a free data retrieval call binding the contract method 0x02fb0c5e.
//
// Solidity: function active() view returns(bool)
func (_rm *rmCaller) Active(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "active")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Active is a free data retrieval call binding the contract method 0x02fb0c5e.
//
// Solidity: function active() view returns(bool)
func (_rm *rmSession) Active() (bool, error) {
	return _rm.Contract.Active(&_rm.CallOpts)
}

// Active is a free data retrieval call binding the contract method 0x02fb0c5e.
//
// Solidity: function active() view returns(bool)
func (_rm *rmCallerSession) Active() (bool, error) {
	return _rm.Contract.Active(&_rm.CallOpts)
}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_rm *rmCaller) DailyAuthorizedInflation(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "dailyAuthorizedInflation")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_rm *rmSession) DailyAuthorizedInflation() (*big.Int, error) {
	return _rm.Contract.DailyAuthorizedInflation(&_rm.CallOpts)
}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_rm *rmCallerSession) DailyAuthorizedInflation() (*big.Int, error) {
	return _rm.Contract.DailyAuthorizedInflation(&_rm.CallOpts)
}

// DefaultFeePercentage is a free data retrieval call binding the contract method 0xb4824034.
//
// Solidity: function defaultFeePercentage() view returns(uint256)
func (_rm *rmCaller) DefaultFeePercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "defaultFeePercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DefaultFeePercentage is a free data retrieval call binding the contract method 0xb4824034.
//
// Solidity: function defaultFeePercentage() view returns(uint256)
func (_rm *rmSession) DefaultFeePercentage() (*big.Int, error) {
	return _rm.Contract.DefaultFeePercentage(&_rm.CallOpts)
}

// DefaultFeePercentage is a free data retrieval call binding the contract method 0xb4824034.
//
// Solidity: function defaultFeePercentage() view returns(uint256)
func (_rm *rmCallerSession) DefaultFeePercentage() (*big.Int, error) {
	return _rm.Contract.DefaultFeePercentage(&_rm.CallOpts)
}

// FeePercentageUpdateOffset is a free data retrieval call binding the contract method 0x16fe49c7.
//
// Solidity: function feePercentageUpdateOffset() view returns(uint256)
func (_rm *rmCaller) FeePercentageUpdateOffset(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "feePercentageUpdateOffset")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeePercentageUpdateOffset is a free data retrieval call binding the contract method 0x16fe49c7.
//
// Solidity: function feePercentageUpdateOffset() view returns(uint256)
func (_rm *rmSession) FeePercentageUpdateOffset() (*big.Int, error) {
	return _rm.Contract.FeePercentageUpdateOffset(&_rm.CallOpts)
}

// FeePercentageUpdateOffset is a free data retrieval call binding the contract method 0x16fe49c7.
//
// Solidity: function feePercentageUpdateOffset() view returns(uint256)
func (_rm *rmCallerSession) FeePercentageUpdateOffset() (*big.Int, error) {
	return _rm.Contract.FeePercentageUpdateOffset(&_rm.CallOpts)
}

// FtsoManager is a free data retrieval call binding the contract method 0x11a7aaaa.
//
// Solidity: function ftsoManager() view returns(address)
func (_rm *rmCaller) FtsoManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "ftsoManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FtsoManager is a free data retrieval call binding the contract method 0x11a7aaaa.
//
// Solidity: function ftsoManager() view returns(address)
func (_rm *rmSession) FtsoManager() (common.Address, error) {
	return _rm.Contract.FtsoManager(&_rm.CallOpts)
}

// FtsoManager is a free data retrieval call binding the contract method 0x11a7aaaa.
//
// Solidity: function ftsoManager() view returns(address)
func (_rm *rmCallerSession) FtsoManager() (common.Address, error) {
	return _rm.Contract.FtsoManager(&_rm.CallOpts)
}

// GetClaimedReward is a free data retrieval call binding the contract method 0x85b4c538.
//
// Solidity: function getClaimedReward(uint256 _rewardEpoch, address _dataProvider, address _claimer) view returns(bool _claimed, uint256 _amount)
func (_rm *rmCaller) GetClaimedReward(opts *bind.CallOpts, _rewardEpoch *big.Int, _dataProvider common.Address, _claimer common.Address) (struct {
	Claimed bool
	Amount  *big.Int
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getClaimedReward", _rewardEpoch, _dataProvider, _claimer)

	outstruct := new(struct {
		Claimed bool
		Amount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Claimed = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetClaimedReward is a free data retrieval call binding the contract method 0x85b4c538.
//
// Solidity: function getClaimedReward(uint256 _rewardEpoch, address _dataProvider, address _claimer) view returns(bool _claimed, uint256 _amount)
func (_rm *rmSession) GetClaimedReward(_rewardEpoch *big.Int, _dataProvider common.Address, _claimer common.Address) (struct {
	Claimed bool
	Amount  *big.Int
}, error) {
	return _rm.Contract.GetClaimedReward(&_rm.CallOpts, _rewardEpoch, _dataProvider, _claimer)
}

// GetClaimedReward is a free data retrieval call binding the contract method 0x85b4c538.
//
// Solidity: function getClaimedReward(uint256 _rewardEpoch, address _dataProvider, address _claimer) view returns(bool _claimed, uint256 _amount)
func (_rm *rmCallerSession) GetClaimedReward(_rewardEpoch *big.Int, _dataProvider common.Address, _claimer common.Address) (struct {
	Claimed bool
	Amount  *big.Int
}, error) {
	return _rm.Contract.GetClaimedReward(&_rm.CallOpts, _rewardEpoch, _dataProvider, _claimer)
}

// GetDataProviderCurrentFeePercentage is a free data retrieval call binding the contract method 0xcfbcd25f.
//
// Solidity: function getDataProviderCurrentFeePercentage(address _dataProvider) view returns(uint256)
func (_rm *rmCaller) GetDataProviderCurrentFeePercentage(opts *bind.CallOpts, _dataProvider common.Address) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getDataProviderCurrentFeePercentage", _dataProvider)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDataProviderCurrentFeePercentage is a free data retrieval call binding the contract method 0xcfbcd25f.
//
// Solidity: function getDataProviderCurrentFeePercentage(address _dataProvider) view returns(uint256)
func (_rm *rmSession) GetDataProviderCurrentFeePercentage(_dataProvider common.Address) (*big.Int, error) {
	return _rm.Contract.GetDataProviderCurrentFeePercentage(&_rm.CallOpts, _dataProvider)
}

// GetDataProviderCurrentFeePercentage is a free data retrieval call binding the contract method 0xcfbcd25f.
//
// Solidity: function getDataProviderCurrentFeePercentage(address _dataProvider) view returns(uint256)
func (_rm *rmCallerSession) GetDataProviderCurrentFeePercentage(_dataProvider common.Address) (*big.Int, error) {
	return _rm.Contract.GetDataProviderCurrentFeePercentage(&_rm.CallOpts, _dataProvider)
}

// GetDataProviderScheduledFeePercentageChanges is a free data retrieval call binding the contract method 0x33b7971e.
//
// Solidity: function getDataProviderScheduledFeePercentageChanges(address _dataProvider) view returns(uint256[] _feePercentageBIPS, uint256[] _validFromEpoch, bool[] _fixed)
func (_rm *rmCaller) GetDataProviderScheduledFeePercentageChanges(opts *bind.CallOpts, _dataProvider common.Address) (struct {
	FeePercentageBIPS []*big.Int
	ValidFromEpoch    []*big.Int
	Fixed             []bool
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getDataProviderScheduledFeePercentageChanges", _dataProvider)

	outstruct := new(struct {
		FeePercentageBIPS []*big.Int
		ValidFromEpoch    []*big.Int
		Fixed             []bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FeePercentageBIPS = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.ValidFromEpoch = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Fixed = *abi.ConvertType(out[2], new([]bool)).(*[]bool)

	return *outstruct, err

}

// GetDataProviderScheduledFeePercentageChanges is a free data retrieval call binding the contract method 0x33b7971e.
//
// Solidity: function getDataProviderScheduledFeePercentageChanges(address _dataProvider) view returns(uint256[] _feePercentageBIPS, uint256[] _validFromEpoch, bool[] _fixed)
func (_rm *rmSession) GetDataProviderScheduledFeePercentageChanges(_dataProvider common.Address) (struct {
	FeePercentageBIPS []*big.Int
	ValidFromEpoch    []*big.Int
	Fixed             []bool
}, error) {
	return _rm.Contract.GetDataProviderScheduledFeePercentageChanges(&_rm.CallOpts, _dataProvider)
}

// GetDataProviderScheduledFeePercentageChanges is a free data retrieval call binding the contract method 0x33b7971e.
//
// Solidity: function getDataProviderScheduledFeePercentageChanges(address _dataProvider) view returns(uint256[] _feePercentageBIPS, uint256[] _validFromEpoch, bool[] _fixed)
func (_rm *rmCallerSession) GetDataProviderScheduledFeePercentageChanges(_dataProvider common.Address) (struct {
	FeePercentageBIPS []*big.Int
	ValidFromEpoch    []*big.Int
	Fixed             []bool
}, error) {
	return _rm.Contract.GetDataProviderScheduledFeePercentageChanges(&_rm.CallOpts, _dataProvider)
}

// GetEpochReward is a free data retrieval call binding the contract method 0xd418634a.
//
// Solidity: function getEpochReward(uint256 _rewardEpoch) view returns(uint256 _totalReward, uint256 _claimedReward)
func (_rm *rmCaller) GetEpochReward(opts *bind.CallOpts, _rewardEpoch *big.Int) (struct {
	TotalReward   *big.Int
	ClaimedReward *big.Int
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getEpochReward", _rewardEpoch)

	outstruct := new(struct {
		TotalReward   *big.Int
		ClaimedReward *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalReward = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ClaimedReward = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEpochReward is a free data retrieval call binding the contract method 0xd418634a.
//
// Solidity: function getEpochReward(uint256 _rewardEpoch) view returns(uint256 _totalReward, uint256 _claimedReward)
func (_rm *rmSession) GetEpochReward(_rewardEpoch *big.Int) (struct {
	TotalReward   *big.Int
	ClaimedReward *big.Int
}, error) {
	return _rm.Contract.GetEpochReward(&_rm.CallOpts, _rewardEpoch)
}

// GetEpochReward is a free data retrieval call binding the contract method 0xd418634a.
//
// Solidity: function getEpochReward(uint256 _rewardEpoch) view returns(uint256 _totalReward, uint256 _claimedReward)
func (_rm *rmCallerSession) GetEpochReward(_rewardEpoch *big.Int) (struct {
	TotalReward   *big.Int
	ClaimedReward *big.Int
}, error) {
	return _rm.Contract.GetEpochReward(&_rm.CallOpts, _rewardEpoch)
}

// GetEpochsWithClaimableRewards is a free data retrieval call binding the contract method 0x0441218e.
//
// Solidity: function getEpochsWithClaimableRewards() view returns(uint256 _startEpochId, uint256 _endEpochId)
func (_rm *rmCaller) GetEpochsWithClaimableRewards(opts *bind.CallOpts) (struct {
	StartEpochId *big.Int
	EndEpochId   *big.Int
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getEpochsWithClaimableRewards")

	outstruct := new(struct {
		StartEpochId *big.Int
		EndEpochId   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartEpochId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EndEpochId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEpochsWithClaimableRewards is a free data retrieval call binding the contract method 0x0441218e.
//
// Solidity: function getEpochsWithClaimableRewards() view returns(uint256 _startEpochId, uint256 _endEpochId)
func (_rm *rmSession) GetEpochsWithClaimableRewards() (struct {
	StartEpochId *big.Int
	EndEpochId   *big.Int
}, error) {
	return _rm.Contract.GetEpochsWithClaimableRewards(&_rm.CallOpts)
}

// GetEpochsWithClaimableRewards is a free data retrieval call binding the contract method 0x0441218e.
//
// Solidity: function getEpochsWithClaimableRewards() view returns(uint256 _startEpochId, uint256 _endEpochId)
func (_rm *rmCallerSession) GetEpochsWithClaimableRewards() (struct {
	StartEpochId *big.Int
	EndEpochId   *big.Int
}, error) {
	return _rm.Contract.GetEpochsWithClaimableRewards(&_rm.CallOpts)
}

// GetEpochsWithUnclaimedRewards is a free data retrieval call binding the contract method 0xb4a2043d.
//
// Solidity: function getEpochsWithUnclaimedRewards(address _beneficiary) view returns(uint256[] _epochIds)
func (_rm *rmCaller) GetEpochsWithUnclaimedRewards(opts *bind.CallOpts, _beneficiary common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getEpochsWithUnclaimedRewards", _beneficiary)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetEpochsWithUnclaimedRewards is a free data retrieval call binding the contract method 0xb4a2043d.
//
// Solidity: function getEpochsWithUnclaimedRewards(address _beneficiary) view returns(uint256[] _epochIds)
func (_rm *rmSession) GetEpochsWithUnclaimedRewards(_beneficiary common.Address) ([]*big.Int, error) {
	return _rm.Contract.GetEpochsWithUnclaimedRewards(&_rm.CallOpts, _beneficiary)
}

// GetEpochsWithUnclaimedRewards is a free data retrieval call binding the contract method 0xb4a2043d.
//
// Solidity: function getEpochsWithUnclaimedRewards(address _beneficiary) view returns(uint256[] _epochIds)
func (_rm *rmCallerSession) GetEpochsWithUnclaimedRewards(_beneficiary common.Address) ([]*big.Int, error) {
	return _rm.Contract.GetEpochsWithUnclaimedRewards(&_rm.CallOpts, _beneficiary)
}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_rm *rmCaller) GetInflationAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getInflationAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_rm *rmSession) GetInflationAddress() (common.Address, error) {
	return _rm.Contract.GetInflationAddress(&_rm.CallOpts)
}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_rm *rmCallerSession) GetInflationAddress() (common.Address, error) {
	return _rm.Contract.GetInflationAddress(&_rm.CallOpts)
}

// GetRewardEpochToExpireNext is a free data retrieval call binding the contract method 0x3e7ff857.
//
// Solidity: function getRewardEpochToExpireNext() view returns(uint256)
func (_rm *rmCaller) GetRewardEpochToExpireNext(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getRewardEpochToExpireNext")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRewardEpochToExpireNext is a free data retrieval call binding the contract method 0x3e7ff857.
//
// Solidity: function getRewardEpochToExpireNext() view returns(uint256)
func (_rm *rmSession) GetRewardEpochToExpireNext() (*big.Int, error) {
	return _rm.Contract.GetRewardEpochToExpireNext(&_rm.CallOpts)
}

// GetRewardEpochToExpireNext is a free data retrieval call binding the contract method 0x3e7ff857.
//
// Solidity: function getRewardEpochToExpireNext() view returns(uint256)
func (_rm *rmCallerSession) GetRewardEpochToExpireNext() (*big.Int, error) {
	return _rm.Contract.GetRewardEpochToExpireNext(&_rm.CallOpts)
}

// GetStateOfRewards is a free data retrieval call binding the contract method 0xa4472c10.
//
// Solidity: function getStateOfRewards(address _beneficiary, uint256 _rewardEpoch) view returns(address[] _dataProviders, uint256[] _rewardAmounts, bool[] _claimed, bool _claimable)
func (_rm *rmCaller) GetStateOfRewards(opts *bind.CallOpts, _beneficiary common.Address, _rewardEpoch *big.Int) (struct {
	DataProviders []common.Address
	RewardAmounts []*big.Int
	Claimed       []bool
	Claimable     bool
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getStateOfRewards", _beneficiary, _rewardEpoch)

	outstruct := new(struct {
		DataProviders []common.Address
		RewardAmounts []*big.Int
		Claimed       []bool
		Claimable     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DataProviders = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.RewardAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Claimed = *abi.ConvertType(out[2], new([]bool)).(*[]bool)
	outstruct.Claimable = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// GetStateOfRewards is a free data retrieval call binding the contract method 0xa4472c10.
//
// Solidity: function getStateOfRewards(address _beneficiary, uint256 _rewardEpoch) view returns(address[] _dataProviders, uint256[] _rewardAmounts, bool[] _claimed, bool _claimable)
func (_rm *rmSession) GetStateOfRewards(_beneficiary common.Address, _rewardEpoch *big.Int) (struct {
	DataProviders []common.Address
	RewardAmounts []*big.Int
	Claimed       []bool
	Claimable     bool
}, error) {
	return _rm.Contract.GetStateOfRewards(&_rm.CallOpts, _beneficiary, _rewardEpoch)
}

// GetStateOfRewards is a free data retrieval call binding the contract method 0xa4472c10.
//
// Solidity: function getStateOfRewards(address _beneficiary, uint256 _rewardEpoch) view returns(address[] _dataProviders, uint256[] _rewardAmounts, bool[] _claimed, bool _claimable)
func (_rm *rmCallerSession) GetStateOfRewards(_beneficiary common.Address, _rewardEpoch *big.Int) (struct {
	DataProviders []common.Address
	RewardAmounts []*big.Int
	Claimed       []bool
	Claimable     bool
}, error) {
	return _rm.Contract.GetStateOfRewards(&_rm.CallOpts, _beneficiary, _rewardEpoch)
}

// GetStateOfRewardsFromDataProviders is a free data retrieval call binding the contract method 0xe416b7e1.
//
// Solidity: function getStateOfRewardsFromDataProviders(address _beneficiary, uint256 _rewardEpoch, address[] _dataProviders) view returns(uint256[] _rewardAmounts, bool[] _claimed, bool _claimable)
func (_rm *rmCaller) GetStateOfRewardsFromDataProviders(opts *bind.CallOpts, _beneficiary common.Address, _rewardEpoch *big.Int, _dataProviders []common.Address) (struct {
	RewardAmounts []*big.Int
	Claimed       []bool
	Claimable     bool
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getStateOfRewardsFromDataProviders", _beneficiary, _rewardEpoch, _dataProviders)

	outstruct := new(struct {
		RewardAmounts []*big.Int
		Claimed       []bool
		Claimable     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RewardAmounts = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.Claimed = *abi.ConvertType(out[1], new([]bool)).(*[]bool)
	outstruct.Claimable = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// GetStateOfRewardsFromDataProviders is a free data retrieval call binding the contract method 0xe416b7e1.
//
// Solidity: function getStateOfRewardsFromDataProviders(address _beneficiary, uint256 _rewardEpoch, address[] _dataProviders) view returns(uint256[] _rewardAmounts, bool[] _claimed, bool _claimable)
func (_rm *rmSession) GetStateOfRewardsFromDataProviders(_beneficiary common.Address, _rewardEpoch *big.Int, _dataProviders []common.Address) (struct {
	RewardAmounts []*big.Int
	Claimed       []bool
	Claimable     bool
}, error) {
	return _rm.Contract.GetStateOfRewardsFromDataProviders(&_rm.CallOpts, _beneficiary, _rewardEpoch, _dataProviders)
}

// GetStateOfRewardsFromDataProviders is a free data retrieval call binding the contract method 0xe416b7e1.
//
// Solidity: function getStateOfRewardsFromDataProviders(address _beneficiary, uint256 _rewardEpoch, address[] _dataProviders) view returns(uint256[] _rewardAmounts, bool[] _claimed, bool _claimable)
func (_rm *rmCallerSession) GetStateOfRewardsFromDataProviders(_beneficiary common.Address, _rewardEpoch *big.Int, _dataProviders []common.Address) (struct {
	RewardAmounts []*big.Int
	Claimed       []bool
	Claimable     bool
}, error) {
	return _rm.Contract.GetStateOfRewardsFromDataProviders(&_rm.CallOpts, _beneficiary, _rewardEpoch, _dataProviders)
}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _foundationAllocatedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_rm *rmCaller) GetTokenPoolSupplyData(opts *bind.CallOpts) (struct {
	FoundationAllocatedFundsWei *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getTokenPoolSupplyData")

	outstruct := new(struct {
		FoundationAllocatedFundsWei *big.Int
		TotalInflationAuthorizedWei *big.Int
		TotalClaimedWei             *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FoundationAllocatedFundsWei = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TotalInflationAuthorizedWei = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalClaimedWei = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _foundationAllocatedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_rm *rmSession) GetTokenPoolSupplyData() (struct {
	FoundationAllocatedFundsWei *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	return _rm.Contract.GetTokenPoolSupplyData(&_rm.CallOpts)
}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _foundationAllocatedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_rm *rmCallerSession) GetTokenPoolSupplyData() (struct {
	FoundationAllocatedFundsWei *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	return _rm.Contract.GetTokenPoolSupplyData(&_rm.CallOpts)
}

// GetUnclaimedReward is a free data retrieval call binding the contract method 0x657d9695.
//
// Solidity: function getUnclaimedReward(uint256 _rewardEpoch, address _dataProvider) view returns(uint256 _amount, uint256 _weight)
func (_rm *rmCaller) GetUnclaimedReward(opts *bind.CallOpts, _rewardEpoch *big.Int, _dataProvider common.Address) (struct {
	Amount *big.Int
	Weight *big.Int
}, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "getUnclaimedReward", _rewardEpoch, _dataProvider)

	outstruct := new(struct {
		Amount *big.Int
		Weight *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Weight = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetUnclaimedReward is a free data retrieval call binding the contract method 0x657d9695.
//
// Solidity: function getUnclaimedReward(uint256 _rewardEpoch, address _dataProvider) view returns(uint256 _amount, uint256 _weight)
func (_rm *rmSession) GetUnclaimedReward(_rewardEpoch *big.Int, _dataProvider common.Address) (struct {
	Amount *big.Int
	Weight *big.Int
}, error) {
	return _rm.Contract.GetUnclaimedReward(&_rm.CallOpts, _rewardEpoch, _dataProvider)
}

// GetUnclaimedReward is a free data retrieval call binding the contract method 0x657d9695.
//
// Solidity: function getUnclaimedReward(uint256 _rewardEpoch, address _dataProvider) view returns(uint256 _amount, uint256 _weight)
func (_rm *rmCallerSession) GetUnclaimedReward(_rewardEpoch *big.Int, _dataProvider common.Address) (struct {
	Amount *big.Int
	Weight *big.Int
}, error) {
	return _rm.Contract.GetUnclaimedReward(&_rm.CallOpts, _rewardEpoch, _dataProvider)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_rm *rmCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_rm *rmSession) Governance() (common.Address, error) {
	return _rm.Contract.Governance(&_rm.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_rm *rmCallerSession) Governance() (common.Address, error) {
	return _rm.Contract.Governance(&_rm.CallOpts)
}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_rm *rmCaller) LastInflationAuthorizationReceivedTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "lastInflationAuthorizationReceivedTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_rm *rmSession) LastInflationAuthorizationReceivedTs() (*big.Int, error) {
	return _rm.Contract.LastInflationAuthorizationReceivedTs(&_rm.CallOpts)
}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_rm *rmCallerSession) LastInflationAuthorizationReceivedTs() (*big.Int, error) {
	return _rm.Contract.LastInflationAuthorizationReceivedTs(&_rm.CallOpts)
}

// ProposedGovernance is a free data retrieval call binding the contract method 0x60f7ac97.
//
// Solidity: function proposedGovernance() view returns(address)
func (_rm *rmCaller) ProposedGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "proposedGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProposedGovernance is a free data retrieval call binding the contract method 0x60f7ac97.
//
// Solidity: function proposedGovernance() view returns(address)
func (_rm *rmSession) ProposedGovernance() (common.Address, error) {
	return _rm.Contract.ProposedGovernance(&_rm.CallOpts)
}

// ProposedGovernance is a free data retrieval call binding the contract method 0x60f7ac97.
//
// Solidity: function proposedGovernance() view returns(address)
func (_rm *rmCallerSession) ProposedGovernance() (common.Address, error) {
	return _rm.Contract.ProposedGovernance(&_rm.CallOpts)
}

// TotalAwardedWei is a free data retrieval call binding the contract method 0x5de8b2f3.
//
// Solidity: function totalAwardedWei() view returns(uint256)
func (_rm *rmCaller) TotalAwardedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "totalAwardedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAwardedWei is a free data retrieval call binding the contract method 0x5de8b2f3.
//
// Solidity: function totalAwardedWei() view returns(uint256)
func (_rm *rmSession) TotalAwardedWei() (*big.Int, error) {
	return _rm.Contract.TotalAwardedWei(&_rm.CallOpts)
}

// TotalAwardedWei is a free data retrieval call binding the contract method 0x5de8b2f3.
//
// Solidity: function totalAwardedWei() view returns(uint256)
func (_rm *rmCallerSession) TotalAwardedWei() (*big.Int, error) {
	return _rm.Contract.TotalAwardedWei(&_rm.CallOpts)
}

// TotalClaimedWei is a free data retrieval call binding the contract method 0x9f71043e.
//
// Solidity: function totalClaimedWei() view returns(uint256)
func (_rm *rmCaller) TotalClaimedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "totalClaimedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalClaimedWei is a free data retrieval call binding the contract method 0x9f71043e.
//
// Solidity: function totalClaimedWei() view returns(uint256)
func (_rm *rmSession) TotalClaimedWei() (*big.Int, error) {
	return _rm.Contract.TotalClaimedWei(&_rm.CallOpts)
}

// TotalClaimedWei is a free data retrieval call binding the contract method 0x9f71043e.
//
// Solidity: function totalClaimedWei() view returns(uint256)
func (_rm *rmCallerSession) TotalClaimedWei() (*big.Int, error) {
	return _rm.Contract.TotalClaimedWei(&_rm.CallOpts)
}

// TotalExpiredWei is a free data retrieval call binding the contract method 0x0cc2a8fe.
//
// Solidity: function totalExpiredWei() view returns(uint256)
func (_rm *rmCaller) TotalExpiredWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "totalExpiredWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalExpiredWei is a free data retrieval call binding the contract method 0x0cc2a8fe.
//
// Solidity: function totalExpiredWei() view returns(uint256)
func (_rm *rmSession) TotalExpiredWei() (*big.Int, error) {
	return _rm.Contract.TotalExpiredWei(&_rm.CallOpts)
}

// TotalExpiredWei is a free data retrieval call binding the contract method 0x0cc2a8fe.
//
// Solidity: function totalExpiredWei() view returns(uint256)
func (_rm *rmCallerSession) TotalExpiredWei() (*big.Int, error) {
	return _rm.Contract.TotalExpiredWei(&_rm.CallOpts)
}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_rm *rmCaller) TotalInflationAuthorizedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "totalInflationAuthorizedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_rm *rmSession) TotalInflationAuthorizedWei() (*big.Int, error) {
	return _rm.Contract.TotalInflationAuthorizedWei(&_rm.CallOpts)
}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_rm *rmCallerSession) TotalInflationAuthorizedWei() (*big.Int, error) {
	return _rm.Contract.TotalInflationAuthorizedWei(&_rm.CallOpts)
}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_rm *rmCaller) TotalInflationReceivedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "totalInflationReceivedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_rm *rmSession) TotalInflationReceivedWei() (*big.Int, error) {
	return _rm.Contract.TotalInflationReceivedWei(&_rm.CallOpts)
}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_rm *rmCallerSession) TotalInflationReceivedWei() (*big.Int, error) {
	return _rm.Contract.TotalInflationReceivedWei(&_rm.CallOpts)
}

// TotalSelfDestructReceivedWei is a free data retrieval call binding the contract method 0x72993615.
//
// Solidity: function totalSelfDestructReceivedWei() view returns(uint256)
func (_rm *rmCaller) TotalSelfDestructReceivedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "totalSelfDestructReceivedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSelfDestructReceivedWei is a free data retrieval call binding the contract method 0x72993615.
//
// Solidity: function totalSelfDestructReceivedWei() view returns(uint256)
func (_rm *rmSession) TotalSelfDestructReceivedWei() (*big.Int, error) {
	return _rm.Contract.TotalSelfDestructReceivedWei(&_rm.CallOpts)
}

// TotalSelfDestructReceivedWei is a free data retrieval call binding the contract method 0x72993615.
//
// Solidity: function totalSelfDestructReceivedWei() view returns(uint256)
func (_rm *rmCallerSession) TotalSelfDestructReceivedWei() (*big.Int, error) {
	return _rm.Contract.TotalSelfDestructReceivedWei(&_rm.CallOpts)
}

// WNat is a free data retrieval call binding the contract method 0x9edbf007.
//
// Solidity: function wNat() view returns(address)
func (_rm *rmCaller) WNat(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _rm.contract.Call(opts, &out, "wNat")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WNat is a free data retrieval call binding the contract method 0x9edbf007.
//
// Solidity: function wNat() view returns(address)
func (_rm *rmSession) WNat() (common.Address, error) {
	return _rm.Contract.WNat(&_rm.CallOpts)
}

// WNat is a free data retrieval call binding the contract method 0x9edbf007.
//
// Solidity: function wNat() view returns(address)
func (_rm *rmCallerSession) WNat() (common.Address, error) {
	return _rm.Contract.WNat(&_rm.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_rm *rmTransactor) Activate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "activate")
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_rm *rmSession) Activate() (*types.Transaction, error) {
	return _rm.Contract.Activate(&_rm.TransactOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_rm *rmTransactorSession) Activate() (*types.Transaction, error) {
	return _rm.Contract.Activate(&_rm.TransactOpts)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_rm *rmTransactor) ClaimGovernance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "claimGovernance")
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_rm *rmSession) ClaimGovernance() (*types.Transaction, error) {
	return _rm.Contract.ClaimGovernance(&_rm.TransactOpts)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_rm *rmTransactorSession) ClaimGovernance() (*types.Transaction, error) {
	return _rm.Contract.ClaimGovernance(&_rm.TransactOpts)
}

// ClaimReward is a paid mutator transaction binding the contract method 0xb2af870a.
//
// Solidity: function claimReward(address _recipient, uint256[] _rewardEpochs) returns(uint256 _rewardAmount)
func (_rm *rmTransactor) ClaimReward(opts *bind.TransactOpts, _recipient common.Address, _rewardEpochs []*big.Int) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "claimReward", _recipient, _rewardEpochs)
}

// ClaimReward is a paid mutator transaction binding the contract method 0xb2af870a.
//
// Solidity: function claimReward(address _recipient, uint256[] _rewardEpochs) returns(uint256 _rewardAmount)
func (_rm *rmSession) ClaimReward(_recipient common.Address, _rewardEpochs []*big.Int) (*types.Transaction, error) {
	return _rm.Contract.ClaimReward(&_rm.TransactOpts, _recipient, _rewardEpochs)
}

// ClaimReward is a paid mutator transaction binding the contract method 0xb2af870a.
//
// Solidity: function claimReward(address _recipient, uint256[] _rewardEpochs) returns(uint256 _rewardAmount)
func (_rm *rmTransactorSession) ClaimReward(_recipient common.Address, _rewardEpochs []*big.Int) (*types.Transaction, error) {
	return _rm.Contract.ClaimReward(&_rm.TransactOpts, _recipient, _rewardEpochs)
}

// ClaimRewardFromDataProviders is a paid mutator transaction binding the contract method 0xd20bb542.
//
// Solidity: function claimRewardFromDataProviders(address _recipient, uint256[] _rewardEpochs, address[] _dataProviders) returns(uint256 _rewardAmount)
func (_rm *rmTransactor) ClaimRewardFromDataProviders(opts *bind.TransactOpts, _recipient common.Address, _rewardEpochs []*big.Int, _dataProviders []common.Address) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "claimRewardFromDataProviders", _recipient, _rewardEpochs, _dataProviders)
}

// ClaimRewardFromDataProviders is a paid mutator transaction binding the contract method 0xd20bb542.
//
// Solidity: function claimRewardFromDataProviders(address _recipient, uint256[] _rewardEpochs, address[] _dataProviders) returns(uint256 _rewardAmount)
func (_rm *rmSession) ClaimRewardFromDataProviders(_recipient common.Address, _rewardEpochs []*big.Int, _dataProviders []common.Address) (*types.Transaction, error) {
	return _rm.Contract.ClaimRewardFromDataProviders(&_rm.TransactOpts, _recipient, _rewardEpochs, _dataProviders)
}

// ClaimRewardFromDataProviders is a paid mutator transaction binding the contract method 0xd20bb542.
//
// Solidity: function claimRewardFromDataProviders(address _recipient, uint256[] _rewardEpochs, address[] _dataProviders) returns(uint256 _rewardAmount)
func (_rm *rmTransactorSession) ClaimRewardFromDataProviders(_recipient common.Address, _rewardEpochs []*big.Int, _dataProviders []common.Address) (*types.Transaction, error) {
	return _rm.Contract.ClaimRewardFromDataProviders(&_rm.TransactOpts, _recipient, _rewardEpochs, _dataProviders)
}

// CloseExpiredRewardEpoch is a paid mutator transaction binding the contract method 0xd6c1dbee.
//
// Solidity: function closeExpiredRewardEpoch(uint256 _rewardEpoch) returns()
func (_rm *rmTransactor) CloseExpiredRewardEpoch(opts *bind.TransactOpts, _rewardEpoch *big.Int) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "closeExpiredRewardEpoch", _rewardEpoch)
}

// CloseExpiredRewardEpoch is a paid mutator transaction binding the contract method 0xd6c1dbee.
//
// Solidity: function closeExpiredRewardEpoch(uint256 _rewardEpoch) returns()
func (_rm *rmSession) CloseExpiredRewardEpoch(_rewardEpoch *big.Int) (*types.Transaction, error) {
	return _rm.Contract.CloseExpiredRewardEpoch(&_rm.TransactOpts, _rewardEpoch)
}

// CloseExpiredRewardEpoch is a paid mutator transaction binding the contract method 0xd6c1dbee.
//
// Solidity: function closeExpiredRewardEpoch(uint256 _rewardEpoch) returns()
func (_rm *rmTransactorSession) CloseExpiredRewardEpoch(_rewardEpoch *big.Int) (*types.Transaction, error) {
	return _rm.Contract.CloseExpiredRewardEpoch(&_rm.TransactOpts, _rewardEpoch)
}

// Deactivate is a paid mutator transaction binding the contract method 0x51b42b00.
//
// Solidity: function deactivate() returns()
func (_rm *rmTransactor) Deactivate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "deactivate")
}

// Deactivate is a paid mutator transaction binding the contract method 0x51b42b00.
//
// Solidity: function deactivate() returns()
func (_rm *rmSession) Deactivate() (*types.Transaction, error) {
	return _rm.Contract.Deactivate(&_rm.TransactOpts)
}

// Deactivate is a paid mutator transaction binding the contract method 0x51b42b00.
//
// Solidity: function deactivate() returns()
func (_rm *rmTransactorSession) Deactivate() (*types.Transaction, error) {
	return _rm.Contract.Deactivate(&_rm.TransactOpts)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa9b79e17.
//
// Solidity: function distributeRewards(address[] _addresses, uint256[] _weights, uint256 _totalWeight, uint256 _epochId, address _ftso, uint256 _priceEpochDurationSeconds, uint256 _currentRewardEpoch, uint256 _priceEpochEndTime, uint256 _votePowerBlock) returns()
func (_rm *rmTransactor) DistributeRewards(opts *bind.TransactOpts, _addresses []common.Address, _weights []*big.Int, _totalWeight *big.Int, _epochId *big.Int, _ftso common.Address, _priceEpochDurationSeconds *big.Int, _currentRewardEpoch *big.Int, _priceEpochEndTime *big.Int, _votePowerBlock *big.Int) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "distributeRewards", _addresses, _weights, _totalWeight, _epochId, _ftso, _priceEpochDurationSeconds, _currentRewardEpoch, _priceEpochEndTime, _votePowerBlock)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa9b79e17.
//
// Solidity: function distributeRewards(address[] _addresses, uint256[] _weights, uint256 _totalWeight, uint256 _epochId, address _ftso, uint256 _priceEpochDurationSeconds, uint256 _currentRewardEpoch, uint256 _priceEpochEndTime, uint256 _votePowerBlock) returns()
func (_rm *rmSession) DistributeRewards(_addresses []common.Address, _weights []*big.Int, _totalWeight *big.Int, _epochId *big.Int, _ftso common.Address, _priceEpochDurationSeconds *big.Int, _currentRewardEpoch *big.Int, _priceEpochEndTime *big.Int, _votePowerBlock *big.Int) (*types.Transaction, error) {
	return _rm.Contract.DistributeRewards(&_rm.TransactOpts, _addresses, _weights, _totalWeight, _epochId, _ftso, _priceEpochDurationSeconds, _currentRewardEpoch, _priceEpochEndTime, _votePowerBlock)
}

// DistributeRewards is a paid mutator transaction binding the contract method 0xa9b79e17.
//
// Solidity: function distributeRewards(address[] _addresses, uint256[] _weights, uint256 _totalWeight, uint256 _epochId, address _ftso, uint256 _priceEpochDurationSeconds, uint256 _currentRewardEpoch, uint256 _priceEpochEndTime, uint256 _votePowerBlock) returns()
func (_rm *rmTransactorSession) DistributeRewards(_addresses []common.Address, _weights []*big.Int, _totalWeight *big.Int, _epochId *big.Int, _ftso common.Address, _priceEpochDurationSeconds *big.Int, _currentRewardEpoch *big.Int, _priceEpochEndTime *big.Int, _votePowerBlock *big.Int) (*types.Transaction, error) {
	return _rm.Contract.DistributeRewards(&_rm.TransactOpts, _addresses, _weights, _totalWeight, _epochId, _ftso, _priceEpochDurationSeconds, _currentRewardEpoch, _priceEpochEndTime, _votePowerBlock)
}

// Initialise is a paid mutator transaction binding the contract method 0x9d6a890f.
//
// Solidity: function initialise(address _governance) returns()
func (_rm *rmTransactor) Initialise(opts *bind.TransactOpts, _governance common.Address) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "initialise", _governance)
}

// Initialise is a paid mutator transaction binding the contract method 0x9d6a890f.
//
// Solidity: function initialise(address _governance) returns()
func (_rm *rmSession) Initialise(_governance common.Address) (*types.Transaction, error) {
	return _rm.Contract.Initialise(&_rm.TransactOpts, _governance)
}

// Initialise is a paid mutator transaction binding the contract method 0x9d6a890f.
//
// Solidity: function initialise(address _governance) returns()
func (_rm *rmTransactorSession) Initialise(_governance common.Address) (*types.Transaction, error) {
	return _rm.Contract.Initialise(&_rm.TransactOpts, _governance)
}

// ProposeGovernance is a paid mutator transaction binding the contract method 0xc373a08e.
//
// Solidity: function proposeGovernance(address _governance) returns()
func (_rm *rmTransactor) ProposeGovernance(opts *bind.TransactOpts, _governance common.Address) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "proposeGovernance", _governance)
}

// ProposeGovernance is a paid mutator transaction binding the contract method 0xc373a08e.
//
// Solidity: function proposeGovernance(address _governance) returns()
func (_rm *rmSession) ProposeGovernance(_governance common.Address) (*types.Transaction, error) {
	return _rm.Contract.ProposeGovernance(&_rm.TransactOpts, _governance)
}

// ProposeGovernance is a paid mutator transaction binding the contract method 0xc373a08e.
//
// Solidity: function proposeGovernance(address _governance) returns()
func (_rm *rmTransactorSession) ProposeGovernance(_governance common.Address) (*types.Transaction, error) {
	return _rm.Contract.ProposeGovernance(&_rm.TransactOpts, _governance)
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_rm *rmTransactor) ReceiveInflation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "receiveInflation")
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_rm *rmSession) ReceiveInflation() (*types.Transaction, error) {
	return _rm.Contract.ReceiveInflation(&_rm.TransactOpts)
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_rm *rmTransactorSession) ReceiveInflation() (*types.Transaction, error) {
	return _rm.Contract.ReceiveInflation(&_rm.TransactOpts)
}

// SetContractAddresses is a paid mutator transaction binding the contract method 0x8ab63380.
//
// Solidity: function setContractAddresses(address _inflation, address _ftsoManager, address _wNat) returns()
func (_rm *rmTransactor) SetContractAddresses(opts *bind.TransactOpts, _inflation common.Address, _ftsoManager common.Address, _wNat common.Address) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "setContractAddresses", _inflation, _ftsoManager, _wNat)
}

// SetContractAddresses is a paid mutator transaction binding the contract method 0x8ab63380.
//
// Solidity: function setContractAddresses(address _inflation, address _ftsoManager, address _wNat) returns()
func (_rm *rmSession) SetContractAddresses(_inflation common.Address, _ftsoManager common.Address, _wNat common.Address) (*types.Transaction, error) {
	return _rm.Contract.SetContractAddresses(&_rm.TransactOpts, _inflation, _ftsoManager, _wNat)
}

// SetContractAddresses is a paid mutator transaction binding the contract method 0x8ab63380.
//
// Solidity: function setContractAddresses(address _inflation, address _ftsoManager, address _wNat) returns()
func (_rm *rmTransactorSession) SetContractAddresses(_inflation common.Address, _ftsoManager common.Address, _wNat common.Address) (*types.Transaction, error) {
	return _rm.Contract.SetContractAddresses(&_rm.TransactOpts, _inflation, _ftsoManager, _wNat)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_rm *rmTransactor) SetDailyAuthorizedInflation(opts *bind.TransactOpts, _toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "setDailyAuthorizedInflation", _toAuthorizeWei)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_rm *rmSession) SetDailyAuthorizedInflation(_toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _rm.Contract.SetDailyAuthorizedInflation(&_rm.TransactOpts, _toAuthorizeWei)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_rm *rmTransactorSession) SetDailyAuthorizedInflation(_toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _rm.Contract.SetDailyAuthorizedInflation(&_rm.TransactOpts, _toAuthorizeWei)
}

// SetDataProviderFeePercentage is a paid mutator transaction binding the contract method 0x16e69328.
//
// Solidity: function setDataProviderFeePercentage(uint256 _feePercentageBIPS) returns(uint256)
func (_rm *rmTransactor) SetDataProviderFeePercentage(opts *bind.TransactOpts, _feePercentageBIPS *big.Int) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "setDataProviderFeePercentage", _feePercentageBIPS)
}

// SetDataProviderFeePercentage is a paid mutator transaction binding the contract method 0x16e69328.
//
// Solidity: function setDataProviderFeePercentage(uint256 _feePercentageBIPS) returns(uint256)
func (_rm *rmSession) SetDataProviderFeePercentage(_feePercentageBIPS *big.Int) (*types.Transaction, error) {
	return _rm.Contract.SetDataProviderFeePercentage(&_rm.TransactOpts, _feePercentageBIPS)
}

// SetDataProviderFeePercentage is a paid mutator transaction binding the contract method 0x16e69328.
//
// Solidity: function setDataProviderFeePercentage(uint256 _feePercentageBIPS) returns(uint256)
func (_rm *rmTransactorSession) SetDataProviderFeePercentage(_feePercentageBIPS *big.Int) (*types.Transaction, error) {
	return _rm.Contract.SetDataProviderFeePercentage(&_rm.TransactOpts, _feePercentageBIPS)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _governance) returns()
func (_rm *rmTransactor) TransferGovernance(opts *bind.TransactOpts, _governance common.Address) (*types.Transaction, error) {
	return _rm.contract.Transact(opts, "transferGovernance", _governance)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _governance) returns()
func (_rm *rmSession) TransferGovernance(_governance common.Address) (*types.Transaction, error) {
	return _rm.Contract.TransferGovernance(&_rm.TransactOpts, _governance)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _governance) returns()
func (_rm *rmTransactorSession) TransferGovernance(_governance common.Address) (*types.Transaction, error) {
	return _rm.Contract.TransferGovernance(&_rm.TransactOpts, _governance)
}

// rmDailyAuthorizedInflationSetIterator is returned from FilterDailyAuthorizedInflationSet and is used to iterate over the raw logs and unpacked data for DailyAuthorizedInflationSet events raised by the rm contract.
type rmDailyAuthorizedInflationSetIterator struct {
	Event *rmDailyAuthorizedInflationSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmDailyAuthorizedInflationSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmDailyAuthorizedInflationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmDailyAuthorizedInflationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmDailyAuthorizedInflationSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmDailyAuthorizedInflationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmDailyAuthorizedInflationSet represents a DailyAuthorizedInflationSet event raised by the rm contract.
type rmDailyAuthorizedInflationSet struct {
	AuthorizedAmountWei *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDailyAuthorizedInflationSet is a free log retrieval operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_rm *rmFilterer) FilterDailyAuthorizedInflationSet(opts *bind.FilterOpts) (*rmDailyAuthorizedInflationSetIterator, error) {

	logs, sub, err := _rm.contract.FilterLogs(opts, "DailyAuthorizedInflationSet")
	if err != nil {
		return nil, err
	}
	return &rmDailyAuthorizedInflationSetIterator{contract: _rm.contract, event: "DailyAuthorizedInflationSet", logs: logs, sub: sub}, nil
}

// WatchDailyAuthorizedInflationSet is a free log subscription operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_rm *rmFilterer) WatchDailyAuthorizedInflationSet(opts *bind.WatchOpts, sink chan<- *rmDailyAuthorizedInflationSet) (event.Subscription, error) {

	logs, sub, err := _rm.contract.WatchLogs(opts, "DailyAuthorizedInflationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmDailyAuthorizedInflationSet)
				if err := _rm.contract.UnpackLog(event, "DailyAuthorizedInflationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDailyAuthorizedInflationSet is a log parse operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_rm *rmFilterer) ParseDailyAuthorizedInflationSet(log types.Log) (*rmDailyAuthorizedInflationSet, error) {
	event := new(rmDailyAuthorizedInflationSet)
	if err := _rm.contract.UnpackLog(event, "DailyAuthorizedInflationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// rmFeePercentageChangedIterator is returned from FilterFeePercentageChanged and is used to iterate over the raw logs and unpacked data for FeePercentageChanged events raised by the rm contract.
type rmFeePercentageChangedIterator struct {
	Event *rmFeePercentageChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmFeePercentageChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmFeePercentageChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmFeePercentageChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmFeePercentageChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmFeePercentageChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmFeePercentageChanged represents a FeePercentageChanged event raised by the rm contract.
type rmFeePercentageChanged struct {
	DataProvider   common.Address
	Value          *big.Int
	ValidFromEpoch *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterFeePercentageChanged is a free log retrieval operation binding the contract event 0xd89f05622c2dcb0b4fcaa19e62fc2a2b0923955685fb7b0c641467f764244abc.
//
// Solidity: event FeePercentageChanged(address indexed dataProvider, uint256 value, uint256 validFromEpoch)
func (_rm *rmFilterer) FilterFeePercentageChanged(opts *bind.FilterOpts, dataProvider []common.Address) (*rmFeePercentageChangedIterator, error) {

	var dataProviderRule []interface{}
	for _, dataProviderItem := range dataProvider {
		dataProviderRule = append(dataProviderRule, dataProviderItem)
	}

	logs, sub, err := _rm.contract.FilterLogs(opts, "FeePercentageChanged", dataProviderRule)
	if err != nil {
		return nil, err
	}
	return &rmFeePercentageChangedIterator{contract: _rm.contract, event: "FeePercentageChanged", logs: logs, sub: sub}, nil
}

// WatchFeePercentageChanged is a free log subscription operation binding the contract event 0xd89f05622c2dcb0b4fcaa19e62fc2a2b0923955685fb7b0c641467f764244abc.
//
// Solidity: event FeePercentageChanged(address indexed dataProvider, uint256 value, uint256 validFromEpoch)
func (_rm *rmFilterer) WatchFeePercentageChanged(opts *bind.WatchOpts, sink chan<- *rmFeePercentageChanged, dataProvider []common.Address) (event.Subscription, error) {

	var dataProviderRule []interface{}
	for _, dataProviderItem := range dataProvider {
		dataProviderRule = append(dataProviderRule, dataProviderItem)
	}

	logs, sub, err := _rm.contract.WatchLogs(opts, "FeePercentageChanged", dataProviderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmFeePercentageChanged)
				if err := _rm.contract.UnpackLog(event, "FeePercentageChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeePercentageChanged is a log parse operation binding the contract event 0xd89f05622c2dcb0b4fcaa19e62fc2a2b0923955685fb7b0c641467f764244abc.
//
// Solidity: event FeePercentageChanged(address indexed dataProvider, uint256 value, uint256 validFromEpoch)
func (_rm *rmFilterer) ParseFeePercentageChanged(log types.Log) (*rmFeePercentageChanged, error) {
	event := new(rmFeePercentageChanged)
	if err := _rm.contract.UnpackLog(event, "FeePercentageChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// rmGovernanceProposedIterator is returned from FilterGovernanceProposed and is used to iterate over the raw logs and unpacked data for GovernanceProposed events raised by the rm contract.
type rmGovernanceProposedIterator struct {
	Event *rmGovernanceProposed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmGovernanceProposedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmGovernanceProposed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmGovernanceProposed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmGovernanceProposedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmGovernanceProposedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmGovernanceProposed represents a GovernanceProposed event raised by the rm contract.
type rmGovernanceProposed struct {
	ProposedGovernance common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterGovernanceProposed is a free log retrieval operation binding the contract event 0x1f95fb40be3a947982072902a887b521248d1d8931a39eb38f84f4d6fd758b69.
//
// Solidity: event GovernanceProposed(address proposedGovernance)
func (_rm *rmFilterer) FilterGovernanceProposed(opts *bind.FilterOpts) (*rmGovernanceProposedIterator, error) {

	logs, sub, err := _rm.contract.FilterLogs(opts, "GovernanceProposed")
	if err != nil {
		return nil, err
	}
	return &rmGovernanceProposedIterator{contract: _rm.contract, event: "GovernanceProposed", logs: logs, sub: sub}, nil
}

// WatchGovernanceProposed is a free log subscription operation binding the contract event 0x1f95fb40be3a947982072902a887b521248d1d8931a39eb38f84f4d6fd758b69.
//
// Solidity: event GovernanceProposed(address proposedGovernance)
func (_rm *rmFilterer) WatchGovernanceProposed(opts *bind.WatchOpts, sink chan<- *rmGovernanceProposed) (event.Subscription, error) {

	logs, sub, err := _rm.contract.WatchLogs(opts, "GovernanceProposed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmGovernanceProposed)
				if err := _rm.contract.UnpackLog(event, "GovernanceProposed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceProposed is a log parse operation binding the contract event 0x1f95fb40be3a947982072902a887b521248d1d8931a39eb38f84f4d6fd758b69.
//
// Solidity: event GovernanceProposed(address proposedGovernance)
func (_rm *rmFilterer) ParseGovernanceProposed(log types.Log) (*rmGovernanceProposed, error) {
	event := new(rmGovernanceProposed)
	if err := _rm.contract.UnpackLog(event, "GovernanceProposed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// rmGovernanceUpdatedIterator is returned from FilterGovernanceUpdated and is used to iterate over the raw logs and unpacked data for GovernanceUpdated events raised by the rm contract.
type rmGovernanceUpdatedIterator struct {
	Event *rmGovernanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmGovernanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmGovernanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmGovernanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmGovernanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmGovernanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmGovernanceUpdated represents a GovernanceUpdated event raised by the rm contract.
type rmGovernanceUpdated struct {
	OldGovernance  common.Address
	NewGoveranance common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterGovernanceUpdated is a free log retrieval operation binding the contract event 0x434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d.
//
// Solidity: event GovernanceUpdated(address oldGovernance, address newGoveranance)
func (_rm *rmFilterer) FilterGovernanceUpdated(opts *bind.FilterOpts) (*rmGovernanceUpdatedIterator, error) {

	logs, sub, err := _rm.contract.FilterLogs(opts, "GovernanceUpdated")
	if err != nil {
		return nil, err
	}
	return &rmGovernanceUpdatedIterator{contract: _rm.contract, event: "GovernanceUpdated", logs: logs, sub: sub}, nil
}

// WatchGovernanceUpdated is a free log subscription operation binding the contract event 0x434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d.
//
// Solidity: event GovernanceUpdated(address oldGovernance, address newGoveranance)
func (_rm *rmFilterer) WatchGovernanceUpdated(opts *bind.WatchOpts, sink chan<- *rmGovernanceUpdated) (event.Subscription, error) {

	logs, sub, err := _rm.contract.WatchLogs(opts, "GovernanceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmGovernanceUpdated)
				if err := _rm.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceUpdated is a log parse operation binding the contract event 0x434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d.
//
// Solidity: event GovernanceUpdated(address oldGovernance, address newGoveranance)
func (_rm *rmFilterer) ParseGovernanceUpdated(log types.Log) (*rmGovernanceUpdated, error) {
	event := new(rmGovernanceUpdated)
	if err := _rm.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// rmInflationReceivedIterator is returned from FilterInflationReceived and is used to iterate over the raw logs and unpacked data for InflationReceived events raised by the rm contract.
type rmInflationReceivedIterator struct {
	Event *rmInflationReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmInflationReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmInflationReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmInflationReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmInflationReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmInflationReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmInflationReceived represents a InflationReceived event raised by the rm contract.
type rmInflationReceived struct {
	AmountReceivedWei *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterInflationReceived is a free log retrieval operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_rm *rmFilterer) FilterInflationReceived(opts *bind.FilterOpts) (*rmInflationReceivedIterator, error) {

	logs, sub, err := _rm.contract.FilterLogs(opts, "InflationReceived")
	if err != nil {
		return nil, err
	}
	return &rmInflationReceivedIterator{contract: _rm.contract, event: "InflationReceived", logs: logs, sub: sub}, nil
}

// WatchInflationReceived is a free log subscription operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_rm *rmFilterer) WatchInflationReceived(opts *bind.WatchOpts, sink chan<- *rmInflationReceived) (event.Subscription, error) {

	logs, sub, err := _rm.contract.WatchLogs(opts, "InflationReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmInflationReceived)
				if err := _rm.contract.UnpackLog(event, "InflationReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInflationReceived is a log parse operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_rm *rmFilterer) ParseInflationReceived(log types.Log) (*rmInflationReceived, error) {
	event := new(rmInflationReceived)
	if err := _rm.contract.UnpackLog(event, "InflationReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// rmRewardClaimedIterator is returned from FilterRewardClaimed and is used to iterate over the raw logs and unpacked data for RewardClaimed events raised by the rm contract.
type rmRewardClaimedIterator struct {
	Event *rmRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmRewardClaimed represents a RewardClaimed event raised by the rm contract.
type rmRewardClaimed struct {
	DataProvider common.Address
	WhoClaimed   common.Address
	SentTo       common.Address
	RewardEpoch  *big.Int
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimed is a free log retrieval operation binding the contract event 0x6ec685171a9028d19dc155a48e7824e3c68b03bc8995410e006abe3cbbeb3e2d.
//
// Solidity: event RewardClaimed(address indexed dataProvider, address indexed whoClaimed, address indexed sentTo, uint256 rewardEpoch, uint256 amount)
func (_rm *rmFilterer) FilterRewardClaimed(opts *bind.FilterOpts, dataProvider []common.Address, whoClaimed []common.Address, sentTo []common.Address) (*rmRewardClaimedIterator, error) {

	var dataProviderRule []interface{}
	for _, dataProviderItem := range dataProvider {
		dataProviderRule = append(dataProviderRule, dataProviderItem)
	}
	var whoClaimedRule []interface{}
	for _, whoClaimedItem := range whoClaimed {
		whoClaimedRule = append(whoClaimedRule, whoClaimedItem)
	}
	var sentToRule []interface{}
	for _, sentToItem := range sentTo {
		sentToRule = append(sentToRule, sentToItem)
	}

	logs, sub, err := _rm.contract.FilterLogs(opts, "RewardClaimed", dataProviderRule, whoClaimedRule, sentToRule)
	if err != nil {
		return nil, err
	}
	return &rmRewardClaimedIterator{contract: _rm.contract, event: "RewardClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardClaimed is a free log subscription operation binding the contract event 0x6ec685171a9028d19dc155a48e7824e3c68b03bc8995410e006abe3cbbeb3e2d.
//
// Solidity: event RewardClaimed(address indexed dataProvider, address indexed whoClaimed, address indexed sentTo, uint256 rewardEpoch, uint256 amount)
func (_rm *rmFilterer) WatchRewardClaimed(opts *bind.WatchOpts, sink chan<- *rmRewardClaimed, dataProvider []common.Address, whoClaimed []common.Address, sentTo []common.Address) (event.Subscription, error) {

	var dataProviderRule []interface{}
	for _, dataProviderItem := range dataProvider {
		dataProviderRule = append(dataProviderRule, dataProviderItem)
	}
	var whoClaimedRule []interface{}
	for _, whoClaimedItem := range whoClaimed {
		whoClaimedRule = append(whoClaimedRule, whoClaimedItem)
	}
	var sentToRule []interface{}
	for _, sentToItem := range sentTo {
		sentToRule = append(sentToRule, sentToItem)
	}

	logs, sub, err := _rm.contract.WatchLogs(opts, "RewardClaimed", dataProviderRule, whoClaimedRule, sentToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmRewardClaimed)
				if err := _rm.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardClaimed is a log parse operation binding the contract event 0x6ec685171a9028d19dc155a48e7824e3c68b03bc8995410e006abe3cbbeb3e2d.
//
// Solidity: event RewardClaimed(address indexed dataProvider, address indexed whoClaimed, address indexed sentTo, uint256 rewardEpoch, uint256 amount)
func (_rm *rmFilterer) ParseRewardClaimed(log types.Log) (*rmRewardClaimed, error) {
	event := new(rmRewardClaimed)
	if err := _rm.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// rmRewardClaimsExpiredIterator is returned from FilterRewardClaimsExpired and is used to iterate over the raw logs and unpacked data for RewardClaimsExpired events raised by the rm contract.
type rmRewardClaimsExpiredIterator struct {
	Event *rmRewardClaimsExpired // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmRewardClaimsExpiredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmRewardClaimsExpired)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmRewardClaimsExpired)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmRewardClaimsExpiredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmRewardClaimsExpiredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmRewardClaimsExpired represents a RewardClaimsExpired event raised by the rm contract.
type rmRewardClaimsExpired struct {
	RewardEpochId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimsExpired is a free log retrieval operation binding the contract event 0x5d05c64f281304391697cf987812e1a736413a062a9bdf39af4102209eb6fa58.
//
// Solidity: event RewardClaimsExpired(uint256 rewardEpochId)
func (_rm *rmFilterer) FilterRewardClaimsExpired(opts *bind.FilterOpts) (*rmRewardClaimsExpiredIterator, error) {

	logs, sub, err := _rm.contract.FilterLogs(opts, "RewardClaimsExpired")
	if err != nil {
		return nil, err
	}
	return &rmRewardClaimsExpiredIterator{contract: _rm.contract, event: "RewardClaimsExpired", logs: logs, sub: sub}, nil
}

// WatchRewardClaimsExpired is a free log subscription operation binding the contract event 0x5d05c64f281304391697cf987812e1a736413a062a9bdf39af4102209eb6fa58.
//
// Solidity: event RewardClaimsExpired(uint256 rewardEpochId)
func (_rm *rmFilterer) WatchRewardClaimsExpired(opts *bind.WatchOpts, sink chan<- *rmRewardClaimsExpired) (event.Subscription, error) {

	logs, sub, err := _rm.contract.WatchLogs(opts, "RewardClaimsExpired")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmRewardClaimsExpired)
				if err := _rm.contract.UnpackLog(event, "RewardClaimsExpired", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardClaimsExpired is a log parse operation binding the contract event 0x5d05c64f281304391697cf987812e1a736413a062a9bdf39af4102209eb6fa58.
//
// Solidity: event RewardClaimsExpired(uint256 rewardEpochId)
func (_rm *rmFilterer) ParseRewardClaimsExpired(log types.Log) (*rmRewardClaimsExpired, error) {
	event := new(rmRewardClaimsExpired)
	if err := _rm.contract.UnpackLog(event, "RewardClaimsExpired", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// rmRewardsDistributedIterator is returned from FilterRewardsDistributed and is used to iterate over the raw logs and unpacked data for RewardsDistributed events raised by the rm contract.
type rmRewardsDistributedIterator struct {
	Event *rmRewardsDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *rmRewardsDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(rmRewardsDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(rmRewardsDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *rmRewardsDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *rmRewardsDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// rmRewardsDistributed represents a RewardsDistributed event raised by the rm contract.
type rmRewardsDistributed struct {
	Ftso      common.Address
	EpochId   *big.Int
	Addresses []common.Address
	Rewards   []*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewardsDistributed is a free log retrieval operation binding the contract event 0x8b2bc56c62594afde5b520e83e1ca19ebd071798db21382e328014f47b31ce57.
//
// Solidity: event RewardsDistributed(address indexed ftso, uint256 epochId, address[] addresses, uint256[] rewards)
func (_rm *rmFilterer) FilterRewardsDistributed(opts *bind.FilterOpts, ftso []common.Address) (*rmRewardsDistributedIterator, error) {

	var ftsoRule []interface{}
	for _, ftsoItem := range ftso {
		ftsoRule = append(ftsoRule, ftsoItem)
	}

	logs, sub, err := _rm.contract.FilterLogs(opts, "RewardsDistributed", ftsoRule)
	if err != nil {
		return nil, err
	}
	return &rmRewardsDistributedIterator{contract: _rm.contract, event: "RewardsDistributed", logs: logs, sub: sub}, nil
}

// WatchRewardsDistributed is a free log subscription operation binding the contract event 0x8b2bc56c62594afde5b520e83e1ca19ebd071798db21382e328014f47b31ce57.
//
// Solidity: event RewardsDistributed(address indexed ftso, uint256 epochId, address[] addresses, uint256[] rewards)
func (_rm *rmFilterer) WatchRewardsDistributed(opts *bind.WatchOpts, sink chan<- *rmRewardsDistributed, ftso []common.Address) (event.Subscription, error) {

	var ftsoRule []interface{}
	for _, ftsoItem := range ftso {
		ftsoRule = append(ftsoRule, ftsoItem)
	}

	logs, sub, err := _rm.contract.WatchLogs(opts, "RewardsDistributed", ftsoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(rmRewardsDistributed)
				if err := _rm.contract.UnpackLog(event, "RewardsDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsDistributed is a log parse operation binding the contract event 0x8b2bc56c62594afde5b520e83e1ca19ebd071798db21382e328014f47b31ce57.
//
// Solidity: event RewardsDistributed(address indexed ftso, uint256 epochId, address[] addresses, uint256[] rewards)
func (_rm *rmFilterer) ParseRewardsDistributed(log types.Log) (*rmRewardsDistributed, error) {
	event := new(rmRewardsDistributed)
	if err := _rm.contract.UnpackLog(event, "RewardsDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
