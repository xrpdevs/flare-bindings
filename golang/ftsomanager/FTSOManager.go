package ftsomanager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FMMetaData contains all meta data concerning the FM contract.
var FMMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"},{\"type\":\"address\",\"name\":\"_flareDaemon\",\"internalType\":\"contractFlareDaemon\"},{\"type\":\"address\",\"name\":\"_priceSubmitter\",\"internalType\":\"contractIIPriceSubmitter\"},{\"type\":\"uint256\",\"name\":\"_firstEpochStartTs\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_priceEpochDurationSeconds\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_revealEpochDurationSeconds\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_rewardEpochsStartTs\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_rewardEpochDurationSeconds\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_votePowerIntervalFraction\",\"internalType\":\"uint256\"}]},{\"type\":\"event\",\"name\":\"CleanupBlockNumberManagerFailedForBlock\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"blockNumber\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"CleanupBlockNumberManagerUnset\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ClosingExpiredRewardEpochFailed\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractRevertError\",\"inputs\":[{\"type\":\"address\",\"name\":\"theContract\",\"internalType\":\"address\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"atBlock\",\"internalType\":\"uint256\",\"indexed\":false},{\"type\":\"string\",\"name\":\"theMessage\",\"internalType\":\"string\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DistributingRewardsFailed\",\"inputs\":[{\"type\":\"address\",\"name\":\"ftso\",\"internalType\":\"address\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"epochId\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FallbackMode\",\"inputs\":[{\"type\":\"bool\",\"name\":\"fallbackMode\",\"internalType\":\"bool\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FinalizingPriceEpochFailed\",\"inputs\":[{\"type\":\"address\",\"name\":\"ftso\",\"internalType\":\"contractIIFtso\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"epochId\",\"internalType\":\"uint256\",\"indexed\":false},{\"type\":\"uint8\",\"name\":\"failingType\",\"internalType\":\"enumIFtso.PriceFinalizationType\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FtsoAdded\",\"inputs\":[{\"type\":\"address\",\"name\":\"ftso\",\"internalType\":\"contractIIFtso\",\"indexed\":false},{\"type\":\"bool\",\"name\":\"add\",\"internalType\":\"bool\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FtsoFallbackMode\",\"inputs\":[{\"type\":\"address\",\"name\":\"ftso\",\"internalType\":\"contractIIFtso\",\"indexed\":false},{\"type\":\"bool\",\"name\":\"fallbackMode\",\"internalType\":\"bool\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"GovernanceProposed\",\"inputs\":[{\"type\":\"address\",\"name\":\"proposedGovernance\",\"internalType\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"GovernanceUpdated\",\"inputs\":[{\"type\":\"address\",\"name\":\"oldGovernance\",\"internalType\":\"address\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newGoveranance\",\"internalType\":\"address\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"InitializingCurrentEpochStateForRevealFailed\",\"inputs\":[{\"type\":\"address\",\"name\":\"ftso\",\"internalType\":\"contractIIFtso\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"epochId\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PriceEpochFinalized\",\"inputs\":[{\"type\":\"address\",\"name\":\"chosenFtso\",\"internalType\":\"address\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"rewardEpochId\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardEpochFinalized\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"votepowerBlock\",\"internalType\":\"uint256\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"startBlock\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"MAX_TRUSTED_ADDRESSES_LENGTH\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"activate\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"name\":\"active\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"addFtso\",\"inputs\":[{\"type\":\"address\",\"name\":\"_ftso\",\"internalType\":\"contractIIFtso\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"addRevertError\",\"inputs\":[{\"type\":\"address\",\"name\":\"revertedContract\",\"internalType\":\"address\"},{\"type\":\"string\",\"name\":\"message\",\"internalType\":\"string\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"claimGovernance\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractCleanupBlockNumberManager\"}],\"name\":\"cleanupBlockNumberManager\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"name\":\"daemonize\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint192\",\"name\":\"totalRevertedErrors\",\"internalType\":\"uint192\"},{\"type\":\"uint64\",\"name\":\"lastErrorTypeIndex\",\"internalType\":\"uint64\"}],\"name\":\"errorData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractFlareDaemon\"}],\"name\":\"flareDaemon\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractIIFtsoRegistry\"}],\"name\":\"ftsoRegistry\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"priceEpochId\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"priceEpochStartTimestamp\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"priceEpochEndTimestamp\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"priceEpochRevealEndTimestamp\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"currentTimestamp\",\"internalType\":\"uint256\"}],\"name\":\"getCurrentPriceEpochData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getCurrentRewardEpoch\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"bool\",\"name\":\"_fallbackMode\",\"internalType\":\"bool\"},{\"type\":\"address[]\",\"name\":\"_ftsos\",\"internalType\":\"contractIIFtso[]\"},{\"type\":\"bool[]\",\"name\":\"_ftsoInFallbackMode\",\"internalType\":\"bool[]\"}],\"name\":\"getFallbackMode\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address[]\",\"name\":\"_ftsos\",\"internalType\":\"contractIIFtso[]\"}],\"name\":\"getFtsos\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"_firstPriceEpochStartTs\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_priceEpochDurationSeconds\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_revealEpochDurationSeconds\",\"internalType\":\"uint256\"}],\"name\":\"getPriceEpochConfiguration\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractIPriceSubmitter\"}],\"name\":\"getPriceSubmitter\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getRewardEpochVotePowerBlock\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_rewardEpoch\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getVotePowerIntervalFraction\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"governance\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"initialise\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"lastRewardedFtsoAddress\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractIIPriceSubmitter\"}],\"name\":\"priceSubmitter\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"proposeGovernance\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"proposedGovernance\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"removeFtso\",\"inputs\":[{\"type\":\"address\",\"name\":\"_ftso\",\"internalType\":\"contractIIFtso\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"replaceFtso\",\"inputs\":[{\"type\":\"address\",\"name\":\"_ftsoToRemove\",\"internalType\":\"contractIIFtso\"},{\"type\":\"address\",\"name\":\"_ftsoToAdd\",\"internalType\":\"contractIIFtso\"},{\"type\":\"bool\",\"name\":\"_copyCurrentPrice\",\"internalType\":\"bool\"},{\"type\":\"bool\",\"name\":\"_copyAssetOrAssetFtsos\",\"internalType\":\"bool\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"rewardEpochDurationSeconds\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"votepowerBlock\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"startBlock\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"startTimestamp\",\"internalType\":\"uint256\"}],\"name\":\"rewardEpochs\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"rewardEpochsStartTs\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractIIFtsoRewardManager\"}],\"name\":\"rewardManager\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setContractAddresses\",\"inputs\":[{\"type\":\"address\",\"name\":\"_rewardManager\",\"internalType\":\"contractIIFtsoRewardManager\"},{\"type\":\"address\",\"name\":\"_ftsoRegistry\",\"internalType\":\"contractIIFtsoRegistry\"},{\"type\":\"address\",\"name\":\"_voterWhitelister\",\"internalType\":\"contractIIVoterWhitelister\"},{\"type\":\"address\",\"name\":\"_supply\",\"internalType\":\"contractIISupply\"},{\"type\":\"address\",\"name\":\"_cleanupBlockNumberManager\",\"internalType\":\"contractCleanupBlockNumberManager\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setFallbackMode\",\"inputs\":[{\"type\":\"bool\",\"name\":\"_fallbackMode\",\"internalType\":\"bool\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setFtsoAsset\",\"inputs\":[{\"type\":\"address\",\"name\":\"_ftso\",\"internalType\":\"contractIIFtso\"},{\"type\":\"address\",\"name\":\"_asset\",\"internalType\":\"contractIIVPToken\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setFtsoAssetFtsos\",\"inputs\":[{\"type\":\"address\",\"name\":\"_ftso\",\"internalType\":\"contractIIFtso\"},{\"type\":\"address[]\",\"name\":\"_assetFtsos\",\"internalType\":\"contractIIFtso[]\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setFtsoFallbackMode\",\"inputs\":[{\"type\":\"address\",\"name\":\"_ftso\",\"internalType\":\"contractIIFtso\"},{\"type\":\"bool\",\"name\":\"_fallbackMode\",\"internalType\":\"bool\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setGovernanceParameters\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_maxVotePowerNatThresholdFraction\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_maxVotePowerAssetThresholdFraction\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_lowAssetUSDThreshold\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_highAssetUSDThreshold\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_highAssetTurnoutThresholdBIPS\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_lowNatTurnoutThresholdBIPS\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"_rewardExpiryOffsetSeconds\",\"internalType\":\"uint256\"},{\"type\":\"address[]\",\"name\":\"_trustedAddresses\",\"internalType\":\"address[]\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"maxVotePowerNatThresholdFraction\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"maxVotePowerAssetThresholdFraction\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"lowAssetUSDThreshold\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"highAssetUSDThreshold\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"highAssetTurnoutThresholdBIPS\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"lowNatTurnoutThresholdBIPS\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"rewardExpiryOffsetSeconds\",\"internalType\":\"uint256\"},{\"type\":\"bool\",\"name\":\"changed\",\"internalType\":\"bool\"},{\"type\":\"bool\",\"name\":\"initialized\",\"internalType\":\"bool\"}],\"name\":\"settings\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256[]\",\"name\":\"_lastErrorBlock\",\"internalType\":\"uint256[]\"},{\"type\":\"uint256[]\",\"name\":\"_numErrors\",\"internalType\":\"uint256[]\"},{\"type\":\"string[]\",\"name\":\"_errorString\",\"internalType\":\"string[]\"},{\"type\":\"address[]\",\"name\":\"_erroringContract\",\"internalType\":\"address[]\"},{\"type\":\"uint256\",\"name\":\"_totalRevertedErrors\",\"internalType\":\"uint256\"}],\"name\":\"showLastRevertedError\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256[]\",\"name\":\"_lastErrorBlock\",\"internalType\":\"uint256[]\"},{\"type\":\"uint256[]\",\"name\":\"_numErrors\",\"internalType\":\"uint256[]\"},{\"type\":\"string[]\",\"name\":\"_errorString\",\"internalType\":\"string[]\"},{\"type\":\"address[]\",\"name\":\"_erroringContract\",\"internalType\":\"address[]\"},{\"type\":\"uint256\",\"name\":\"_totalRevertedErrors\",\"internalType\":\"uint256\"}],\"name\":\"showRevertedErrors\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"startIndex\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"numErrorTypesToShow\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractIISupply\"}],\"name\":\"supply\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"name\":\"switchToFallbackMode\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"transferGovernance\",\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contractIIVoterWhitelister\"}],\"name\":\"voterWhitelister\",\"inputs\":[]}]",
	Bin: "0x608060405234801561001057600080fd5b50600436106102745760003560e01c806393a7902511610151578063ce69f833116100c3578063e7a0d01e11610087578063e7a0d01e146104cf578063e7c830d4146104e2578063e847ae1e146104ea578063f2edab5a146104fd578063f937d6ad14610510578063ff882fbb1461051857610274565b8063ce69f8331461046c578063d38bfff414610481578063e06174e414610494578063e22fdece146104b1578063e371aef0146104b957610274565b8063a795f40911610115578063a795f40914610405578063a93a6f4214610418578063af946af71461042b578063c0ffe9081461043e578063c2b0d47b14610451578063c373a08e1461045957610274565b806393a79025146103b65780639d6a890f146103cf578063a1077532146103e2578063a578f55b146103ea578063a670ff87146103f257610274565b80634eac870f116101ea57806369b11ac6116101ae57806369b11ac6146103655780636b65cc341461036d5780636d0e8c34146103805780636ea0aa311461038857806385f3c9c91461039b5780639131205b146103a357610274565b80634eac870f146103305780635aa6e675146103385780635d36b1901461034057806360f2c5b21461034857806360f7ac971461035d57610274565b8063144e15911161023c578063144e1591146102c65780632663f1b4146102dd5780632b3c41a4146102f05780632fd8eb7d1461030957806338b5f869146103115780634b48dd5e1461031957610274565b806302fb0c5e14610279578063047fc9aa146102975780630e063d7d146102ac5780630f15f4c0146102b45780630f4ef8a6146102be575b600080fd5b61028161052b565b60405161028e9190614e8e565b60405180910390f35b61029f610534565b60405161028e9190614cde565b61029f610543565b6102bc610568565b005b61029f6105c8565b6102ce6105d7565b60405161028e93929190614f8f565b6102bc6102eb3660046145d4565b61063f565b6102f861069e565b60405161028e959493929190614def565b61029f6106d9565b61029f6106e8565b6103216106f7565b60405161028e93929190614e99565b61029f6107d3565b61029f6107e2565b6102bc6107f1565b6103506108b3565b60405161028e9190614f78565b61029f6108d7565b6103506108e6565b6102bc61037b366004614a2b565b6108eb565b61028161099e565b6102f8610396366004614ae1565b610aaf565b610350610e13565b6102bc6103b1366004614b25565b610e37565b6103be6110a7565b60405161028e959493929190614fa5565b6102bc6103dd3660046145d4565b61113a565b61029f611214565b610350611238565b6102bc6104003660046145d4565b61125c565b6102ce610413366004614ab1565b611486565b6102bc6104263660046148f3565b6114b9565b6102bc6104393660046149a0565b611649565b6102bc61044c3660046145f7565b61175a565b61029f611933565b6102bc6104673660046145d4565b611942565b6104746119e7565b60405161028e9190614ddc565b6102bc61048f3660046145d4565b6119f6565b61049c611ab8565b60405161028e9998979695949392919061500c565b610281611adf565b6104c1611bbd565b60405161028e929190614f56565b6102bc6104dd3660046149d4565b611bde565b6103506122db565b6102bc6104f8366004614883565b61233e565b61035061050b366004614ab1565b6123ee565b61029f612417565b6102bc610526366004614869565b61243b565b60055460ff1681565b601a546001600160a01b031681565b7f00000000000000000000000010000000000000000000000000000000000000035b90565b6000546001600160a01b031633146105b9576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b6005805460ff19166001179055565b6017546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000006143aba17f00000000000000000000000000000000000000000000000000000000000000b47f000000000000000000000000000000000000000000000000000000000000005a909192565b6000546001600160a01b03163314610690576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b61069b8160016124de565b50565b6004546060908190819081906000906106c890600160c01b90046001600160401b03166001610aaf565b945094509450945094509091929394565b6007546001600160a01b031681565b6018546001600160a01b031681565b601b54600160a81b900460ff1660608061070f612abc565b8051909250806001600160401b038111801561072a57600080fd5b50604051908082528060200260200182016040528015610754578160200160208202803683370190505b50915060005b818110156107cc57601c600085838151811061077257fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff168382815181106107b457fe5b9115156020928302919091019091015260010161075a565b5050909192565b601b546001600160a01b031681565b6000546001600160a01b031681565b6001546001600160a01b03163314610840576040805162461bcd60e51b815260206004820152600d60248201526c1b9bdd0818db185a5b585a5b9d609a1b604482015290519081900360640190fd5b600054600154604080516001600160a01b03938416815292909116602083015280517f434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d9281900390910190a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b7f000000000000000000000000000000000000000000000000000000000000000490565b6001546001600160a01b031681565b600581565b6000546001600160a01b0316331461093c576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b60405163d0d552dd60e01b81526001600160a01b0383169063d0d552dd90610968908490600401614cde565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b505050505050565b6000336001600160a01b037f00000000000000000000000010000000000000000000000000000000000000021614610a11576040805162461bcd60e51b815260206004820152601160248201527037b7363c90333630b932903230b2b6b7b760791b604482015290519081900360640190fd5b60055460ff16610a2357506000610565565b600654610a3757610a32612b3d565b610aa9565b601b54600160a01b900460ff168015610a5257504260125411155b15610a5f57610a32612cb2565b601b54600160a01b900460ff16158015610a7b57504260135411155b15610a9857610a88613293565b610a90613588565b610a32613717565b4260125411610aa957610aa96138a8565b50600190565b606080606080600060038054905087106040518060400160405280601081526020016f0e6e8c2e4e840d2dcc8caf040d0d2ced60831b81525090610b0f5760405162461bcd60e51b8152600401610b069190614f43565b60405180910390fd5b506003546000908888011115610b2a57600354889003610b2c565b865b9050806001600160401b0381118015610b4457600080fd5b50604051908082528060200260200182016040528015610b6e578160200160208202803683370190505b509550806001600160401b0381118015610b8757600080fd5b50604051908082528060200260200182016040528015610bb1578160200160208202803683370190505b509450806001600160401b0381118015610bca57600080fd5b50604051908082528060200260200182016040528015610bfe57816020015b6060815260200190600190039081610be95790505b509350806001600160401b0381118015610c1757600080fd5b50604051908082528060200260200182016040528015610c41578160200160208202803683370190505b50925060005b81811015610df75760006003828b0181548110610c6057fe5b6000918252602080832090910154808352600290915260409091205489519192506001600160c01b031690899084908110610c9757fe5b6020026020010181815250506002600082815260200190815260200160002060000160189054906101000a90046001600160401b03166001600160401b0316878381518110610ce257fe5b602090810291909101810191909152600082815260028083526040918290208101805483516001821615610100026000190190911692909204601f81018590048502830185019093528282529092909190830182828015610d845780601f10610d5957610100808354040283529160200191610d84565b820191906000526020600020905b815481529060010190602001808311610d6757829003601f168201915b5050505050868381518110610d9557fe5b60200260200101819052506002600082815260200190815260200160002060010160009054906101000a90046001600160a01b0316858381518110610dd657fe5b6001600160a01b039092166020928302919091019091015250600101610c47565b50506004549497939650919450926001600160c01b0316919050565b7f0000000000000000000000000000000000000000000000000000000000093a8081565b6000546001600160a01b03163314610e88576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b60408051808201909152601381527211dbdd8b881c185c985b5cc81a5b9d985b1a59606a1b602082015288610ed05760405162461bcd60e51b8152600401610b069190614f43565b5060408051808201909152601381527211dbdd8b881c185c985b5cc81a5b9d985b1a59606a1b602082015287610f195760405162461bcd60e51b8152600401610b069190614f43565b5060408051808201909152601381527211dbdd8b881c185c985b5cc81a5b9d985b1a59606a1b602082015286861015610f655760405162461bcd60e51b8152600401610b069190614f43565b5060408051808201909152601381527211dbdd8b881c185c985b5cc81a5b9d985b1a59606a1b6020820152612710851115610fb35760405162461bcd60e51b8152600401610b069190614f43565b5060408051808201909152601381527211dbdd8b881c185c985b5cc81a5b9d985b1a59606a1b60208201526127108411156110015760405162461bcd60e51b8152600401610b069190614f43565b5060408051808201909152601581527414995dd85c9908195e1c1a5c9e481a5b9d985b1a59605a1b60208201528261104c5760405162461bcd60e51b8152600401610b069190614f43565b5060058151111560405180606001604052806025815260200161519c602591399061108a5760405162461bcd60e51b8152600401610b069190614f43565b5061109d60088989898989898989613bd9565b5050505050505050565b6000806000806000806110b8613dd2565b9550507f000000000000000000000000000000000000000000000000000000006143aba17f00000000000000000000000000000000000000000000000000000000000000b4808702820195506001870102019250507f000000000000000000000000000000000000000000000000000000000000005a82019050429091929394565b600154600160a01b900460ff1615611190576040805162461bcd60e51b8152602060048201526014602482015273696e697469616c6973656420213d2066616c736560601b604482015290519081900360640190fd5b6001805460ff60a01b1916600160a01b179055600054604080516001600160a01b039283168152918316602083015280517f434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d9281900390910190a1600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b7f000000000000000000000000100000000000000000000000000000000000000281565b7f000000000000000000000000000000000000000000000000000000006145a63b81565b6000546001600160a01b031633146112ad576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b6000601860009054906101000a90046001600160a01b03166001600160a01b031663e848da30836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561130c57600080fd5b505afa158015611320573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113489190810190614a7f565b6040518263ffffffff1660e01b81526004016113649190614f43565b60206040518083038186803b15801561137c57600080fd5b505afa158015611390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b49190614ac9565b60195460405163d873617160e01b81529192506001600160a01b03169063d8736171906113e5908490600401614f78565b600060405180830381600087803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b505060185460405163a670ff8760e01b81526001600160a01b03909116925063a670ff879150611447908590600401614cde565b600060405180830381600087803b15801561146157600080fd5b505af1158015611475573d6000803e3d6000fd5b5050505061148282613e25565b5050565b6006818154811061149657600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b6000546001600160a01b0316331461150a576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b80516040805180820190915260168152754173736574206674736f73206c69737420656d70747960501b6020820152816115575760405162461bcd60e51b8152600401610b069190614f43565b5060005b818110156115dc5782818151811061156f57fe5b60200260200101516001600160a01b0316846001600160a01b031614156115d45760408051808201825260168152756674736f20657175616c73206173736574206674736f60501b6020820152905162461bcd60e51b8152610b069190600401614f43565b60010161155b565b506115e682613efc565b60405163098fef7160e11b81526001600160a01b0384169063131fdee290611612908590600401614ddc565b600060405180830381600087803b15801561162c57600080fd5b505af1158015611640573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b0316331461169a576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b6001600160a01b0382166000908152601560209081526040918290205482518084019093526009835268139bdd08199bdd5b9960ba1b9183019190915260ff166116f75760405162461bcd60e51b8152600401610b069190614f43565b506001600160a01b0382166000908152601c602052604090819020805460ff1916831515179055517f24462ede4d3e8e5a69fecec6290d42a311016ca752216d9a3d681e284791b7ac9061174e9084908490614ee9565b60405180910390a15050565b6000828260405160200161176f929190614d0b565b60408051601f198184030181528282528051602091820120600081815260029092529190208054436001600160c01b038181166001600160401b03600160c01b80860482166001019091160291909316176001600160c01b031916919091179091559092507f1a601cf5e0efbd558b2778b7389af04741d1c49bcab104c40daa2da194593617916118039186918690614d2f565b60405180910390a1600480546001600160c01b0319811660016001600160c01b03928316810190921617909155600082815260026020526040902054600160c01b90046001600160401b0316111561185b5750611482565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01829055600082815260026020818152604090922092830180546001600160a01b0319166001600160a01b03881617905584516118cb9390910191850190614417565b50600354600091825260026020526040909120600101805467ffffffffffffffff60a01b1916600160a01b6000199093016001600160401b0390811684029190911791829055600480546001600160c01b03169390920416600160c01b029190911790555050565b6019546001600160a01b031681565b6000546001600160a01b03163314611993576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b600180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f1f95fb40be3a947982072902a887b521248d1d8931a39eb38f84f4d6fd758b699181900360200190a150565b60606119f1612abc565b905090565b6000546001600160a01b03163314611a47576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b600054604080516001600160a01b039283168152918316602083015280517f434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d9281900390910190a1600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b600854600954600a54600b54600c54600d54600e5460105460ff8082169161010090041689565b6000336001600160a01b037f00000000000000000000000010000000000000000000000000000000000000021614611b52576040805162461bcd60e51b815260206004820152601160248201527037b7363c90333630b932903230b2b6b7b760791b604482015290519081900360640190fd5b601b54600160a81b900460ff16611bb757601b805460ff60a81b1916600160a81b1790556040517f217a37a37fc40a97159886f80c3d45986e6fc4330ce6ad7283478b5e5ab705bc90611ba790600190614e8e565b60405180910390a1506001610565565b50600090565b6004546001600160c01b03811690600160c01b90046001600160401b031682565b6000546001600160a01b03163314611c2f576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611c6857600080fd5b505afa158015611c7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ca49190810190614a7f565b604051602001611cb49190614f43565b60405160208183030381529060405280519060200120846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611d0357600080fd5b505afa158015611d17573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d3f9190810190614a7f565b604051602001611d4f9190614f43565b60405160208183030381529060405280519060200120146040518060400160405280601781526020017f4654534f2073796d626f6c73206d757374206d6174636800000000000000000081525090611dba5760405162461bcd60e51b8152600401610b069190614f43565b506000611dc5612abc565b805190915060005b81811015611e0f57866001600160a01b0316838281518110611deb57fe5b60200260200101516001600160a01b03161415611e0757611e0f565b600101611dcd565b81811415611e4e576040805180820182526009815268139bdd08199bdd5b9960ba1b6020820152905162461bcd60e51b8152610b069190600401614f43565b8415611f2f57600080886001600160a01b031663eb91d37e6040518163ffffffff1660e01b8152600401604080518083038186803b158015611e8f57600080fd5b505afa158015611ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec79190614b02565b60405163306ba25360e01b815291935091506001600160a01b0389169063306ba25390611efa9085908590600401614f81565b600060405180830381600087803b158015611f1457600080fd5b505af1158015611f28573d6000803e3d6000fd5b5050505050505b8315612100576000876001600160a01b0316635c222bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7057600080fd5b505afa158015611f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa89190614a63565b90506001600160a01b0381161561201c5760405163d0d552dd60e01b81526001600160a01b0388169063d0d552dd90611fe5908490600401614cde565b600060405180830381600087803b158015611fff57600080fd5b505af1158015612013573d6000803e3d6000fd5b505050506120fe565b6000886001600160a01b03166318931c356040518163ffffffff1660e01b815260040160006040518083038186803b15801561205757600080fd5b505afa15801561206b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120939190810190614749565b8051909150156120fc5760405163098fef7160e11b81526001600160a01b0389169063131fdee2906120c9908490600401614ddc565b600060405180830381600087803b1580156120e357600080fd5b505af11580156120f7573d6000803e3d6000fd5b505050505b505b505b61210b8660006124de565b6000612115612abc565b805190915060005b818110156122c657600083828151811061213357fe5b602002602001015190508a6001600160a01b0316816001600160a01b0316141561215d57506122be565b6000816001600160a01b03166318931c356040518163ffffffff1660e01b815260040160006040518083038186803b15801561219857600080fd5b505afa1580156121ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121d49190810190614749565b805190915080156122ba576000805b82811015612252578e6001600160a01b031684828151811061220157fe5b60200260200101516001600160a01b0316141561224a578d84828151811061222557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600191505b6001016121e3565b5080156122b85760405163098fef7160e11b81526001600160a01b0385169063131fdee290612285908690600401614ddc565b600060405180830381600087803b15801561229f57600080fd5b505af11580156122b3573d6000803e3d6000fd5b505050505b505b5050505b60010161211d565b506122d089613e25565b505050505050505050565b6006546040805180820190915260208082527f5265776172642065706f6368206e6f7420696e697469616c697a6564207965749082015260009190816123345760405162461bcd60e51b8152600401610b069190614f43565b5060001901905090565b6000546001600160a01b0316331461238f576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b601780546001600160a01b03199081166001600160a01b03978816179091556018805482169587169590951790945560198054851693861693909317909255601a80548416918516919091179055601b80549092169216919091179055565b6000600682815481106123fd57fe5b90600052602060002090600302016000015490505b919050565b7f000000000000000000000000100000000000000000000000000000000000000381565b6000546001600160a01b0316331461248c576040805162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b604482015290519081900360640190fd5b601b805460ff60a81b1916600160a81b831515021790556040517f217a37a37fc40a97159886f80c3d45986e6fc4330ce6ad7283478b5e5ab705bc906124d3908390614e8e565b60405180910390a150565b60105460408051808201909152601b81527f476f762e20706172616d73206e6f7420696e697469616c697a65640000000000602082015290610100900460ff1661253b5760405162461bcd60e51b8152600401610b069190614f43565b506125b9826001600160a01b03166318931c356040518163ffffffff1660e01b815260040160006040518083038186803b15801561257857600080fd5b505afa15801561258c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125b49190810190614749565b613efc565b8015612782576000826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156125fa57600080fd5b505afa15801561260e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126369190810190614a7f565b6040516020016126469190614f43565b6040516020818303038152906040528051906020012090506000601860009054906101000a90046001600160a01b03166001600160a01b031663ce1c0e4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156126ae57600080fd5b505afa1580156126c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126ea91908101906147e1565b80519091505b801561277e57806001900390508282828151811061270a57fe5b60200260200101516040516020016127229190614f43565b60405160208183030381529060405280519060200120141561277957604080518082018252600d81526c105b1c9958591e481859191959609a1b6020820152905162461bcd60e51b8152610b069190600401614f43565b6126f0565b5050505b604051630bc29bcf60e21b81526001600160a01b03831690632f0a6f3c90612812907f000000000000000000000000000000000000000000000000000000006143aba1907f00000000000000000000000000000000000000000000000000000000000000b4907f000000000000000000000000000000000000000000000000000000000000005a90600401614f8f565b600060405180830381600087803b15801561282c57600080fd5b505af1158015612840573d6000803e3d6000fd5b50506006541591506128d2905057600680546001600160a01b0384169163e536f39691600019810190811061287157fe5b9060005260206000209060030201600001546040518263ffffffff1660e01b815260040161289f9190614f78565b600060405180830381600087803b1580156128b957600080fd5b505af11580156128cd573d6000803e3d6000fd5b505050505b600854600954600a54600b54600c54600d5460405163f7dba1f560e01b81526001600160a01b0389169663f7dba1f596612919969195909491939092600f90600401614fc8565b600060405180830381600087803b15801561293357600080fd5b505af1158015612947573d6000803e3d6000fd5b5050601b546001600160a01b038086166000908152601660209081526040808320805460ff600160a01b90970496909616151560ff19968716179055601590915280822080549094166001179093556018549251630998fc6d60e21b815290945091169150632663f1b4906129c0908690600401614cde565b602060405180830381600087803b1580156129da57600080fd5b505af11580156129ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a129190614ac9565b90508115612a7d57601954604051630d15c16960e21b81526001600160a01b039091169063345705a490612a4a908490600401614f78565b600060405180830381600087803b158015612a6457600080fd5b505af1158015612a78573d6000803e3d6000fd5b505050505b7fa0985424f2efdcae4b57a7c84bbf0a0b19f93054f21e9eb1cfcd5a59813fe1da836001604051612aaf929190614ee9565b60405180910390a1505050565b60185460408051635200305d60e11b815290516060926001600160a01b03169163a40060ba916004808301926000929190829003018186803b158015612b0157600080fd5b505afa158015612b15573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119f19190810190614749565b7f0000000000000000000000000000000000000000000000000000000000093a80601354034210612cb0576000612b72612abc565b8051604080516060810182524360001981018252602082019081524292820192835260068054600181018255600091825283517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60039092029182015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4083015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41909101559293509091905b82811015612cab57838181518110612c3757fe5b60200260200101516001600160a01b031663e536f39683600001516040518263ffffffff1660e01b8152600401612c6e9190614f78565b600060405180830381600087803b158015612c8857600080fd5b505af1158015612c9c573d6000803e3d6000fd5b50505050806001019050612c23565b505050505b565b6000612cbc612abc565b80519091508015801590612cda5750601b54600160a81b900460ff16155b156131ae576007546000906001600160a01b0316612d2e57814442604051602001612d06929190614f81565b6040516020818303038152906040528051906020012060001c81612d2657fe5b069050612e04565b6000805b83811015612dca57848181518110612d4657fe5b60200260200101516001600160a01b031663d89601fd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d8657600080fd5b505afa158015612d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbe9190614ac9565b90910190600101612d32565b50828142604051602001612ddf929190614f81565b6040516020818303038152906040528051906020012060001c81612dff57fe5b069150505b60608060008080805b87811015612f8c5760008882890181612e2257fe5b06905060008a8281518110612e3357fe5b6020908102919091018101516001600160a01b0381166000908152601690925260409091205490915060ff1615612e89576001600160a01b03166000908152601660205260409020805460ff1916905550612f84565b6011546040516340462a2d60e01b81526001600160a01b038316916340462a2d91612eba9190891590600401614f33565b600060405180830381600087803b158015612ed457600080fd5b505af1925050508015612f0957506040513d6000823e601f3d908101601f19168201604052612f06919081019061467e565b60015b612f5757612f156150e2565b80612f205750612f30565b612f2a8282613f83565b50612f52565b612f528160405180606001604052806022815260200161520f60229139613f83565b612f81565b87158015612f66575060008351115b15612f7d5791995097509550600194509250828787875b5050505b50505b600101612e0d565b506000612f976122db565b9050821561314d576017546011546001600160a01b039091169063a9b79e1790889088908890877f00000000000000000000000000000000000000000000000000000000000000b4886001612feb85613fd4565b0360068b81548110612ff957fe5b9060005260206000209060030201600001546040518a63ffffffff1660e01b815260040161302f99989796959493929190614d5f565b600060405180830381600087803b15801561304957600080fd5b505af192505050801561305a575060015b61314d576130666150e2565b8061307157506130c8565b7f175a1d13d190d6a1e14461c214b3ecf6118b828797750b7bffd7c4f2c1eba54c836011546040516130a4929190614cf2565b60405180910390a16017546130c2906001600160a01b03168261175a565b5061314d565b7f175a1d13d190d6a1e14461c214b3ecf6118b828797750b7bffd7c4f2c1eba54c826011546040516130fb929190614cf2565b60405180910390a16017546040805180820190915260208082527f756e6b6e6f776e206661696c2e206469737472696275746520726577617264739082015261314d916001600160a01b03169061175a565b600780546001600160a01b0319166001600160a01b0384161790556040517f98b050a4042fbd1b89934ef40b9342e593f15081a348af940573a0179031f4ad9061319a9084908490614cf2565b60405180910390a150505050505050613282565b60005b8181101561322f5760008382815181106131c757fe5b6020908102919091018101516001600160a01b0381166000908152601690925260409091205490915060ff161561321c576001600160a01b03166000908152601660205260409020805460ff19169055613227565b61322581614021565b505b6001016131b1565b50600780546001600160a01b03191690557f98b050a4042fbd1b89934ef40b9342e593f15081a348af940573a0179031f4ad600061326b6122db565b604051613279929190614cf2565b60405180910390a15b5050601b805460ff60a01b19169055565b600061329d612abc565b80519091504281156133465760005b82811015613344578381815181106132c057fe5b60200260200101516001600160a01b031663d89601fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561330057600080fd5b505afa158015613314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133389190614ac9565b909101906001016132ac565b505b806040516020016133579190614f78565b6040516020818303038152906040528051906020012060001c905060007f0000000000000000000000000000000000000000000000000000000000000004600661339f6122db565b815481106133a957fe5b9060005260206000209060030201600101544303816133c457fe5b049050806133d0575060015b60008183816133db57fe5b069050806133e7575060015b60408051606081018252438381038252602082019081524292820192835260068054600181018255600091825283517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60039092029182015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4083015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4190910155905b85811015613518578681815181106134a357fe5b60200260200101516001600160a01b031663e536f39683600001516040518263ffffffff1660e01b81526004016134da9190614f78565b600060405180830381600087803b1580156134f457600080fd5b505af1158015613508573d6000803e3d6000fd5b50506001909201915061348f9050565b50805160208201516040517f1813f880dc24666c8b69c9d771a487ea620a27fde1514be3112847056c0c532292613550929091614f81565b60405180910390a15050601380547f0000000000000000000000000000000000000000000000000000000000093a8001905550505050565b60006135926122db565b600e5490915042035b816014541080156135cf5750806006601454600101815481106135ba57fe5b90600052602060002090600302016002015411155b1561148257601754601454604051636b60edf760e11b81526001600160a01b039092169163d6c1dbee9161360591600401614f78565b600060405180830381600087803b15801561361f57600080fd5b505af1925050508015613630575060015b6137095761363c6150e2565b80613647575061369c565b7fa819a21065ad87bdde9e6d398d3213e0d3634afd87aceb7092236483f5d7ca8d6014546040516136789190614f78565b60405180910390a1601754613696906001600160a01b03168261175a565b50611482565b7fa819a21065ad87bdde9e6d398d3213e0d3634afd87aceb7092236483f5d7ca8d6014546040516136cd9190614f78565b60405180910390a160175460408051606081019091526021808252613704926001600160a01b03169190615231602083013961175a565b611482565b60148054600101905561359b565b601b546001600160a01b0316613755576040517f9a880a9e2a01928f1a99d7b0e2ea1147f52e2eb381f8d9345c110932d57bce8d90600090a1612cb0565b600060066014548154811061376657fe5b6000918252602090912060039091020154601b5460405163cbc31cf760e01b81529192506001600160a01b03169063cbc31cf7906137a8908490600401614f78565b600060405180830381600087803b1580156137c257600080fd5b505af19250505080156137d3575060015b61069b576137df6150e2565b806137ea575061383d565b7f9f874ea08c7014cce74622bfe71434f81aba7598ad65126a6aea86945bdfa18d826040516138199190614f78565b60405180910390a1601b54613837906001600160a01b03168261175a565b506138a3565b7f9f874ea08c7014cce74622bfe71434f81aba7598ad65126a6aea86945bdfa18d8160405161386c9190614f78565b60405180910390a1601b54604080516060810190915260238082526138a3926001600160a01b031691906151c1602083013961175a565b61069b565b60105460ff161561393357604051639ec2b58160e01b81526001600160a01b037f00000000000000000000000010000000000000000000000000000000000000031690639ec2b5819061390090600f90600401614dc9565b600060405180830381600087803b15801561391a57600080fd5b505af115801561392e573d6000803e3d6000fd5b505050505b600061393d612abc565b80519091506000811580159061395d5750601b54600160a81b900460ff16155b15613a0f576006805460009190600019810190811061397857fe5b6000918252602090912060039091020154601a546040516237b08960e41b81529192506001600160a01b03169063037b0890906139b9908490600401614f78565b602060405180830381600087803b1580156139d357600080fd5b505af11580156139e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0b9190614ac9565b9150505b60005b82811015613b98576000848281518110613a2857fe5b602090810291909101015160105490915060ff1615613abb57600854600954600a54600b54600c54600d5460405163f7dba1f560e01b81526001600160a01b0388169663f7dba1f596613a88969195909491939092600f90600401614fc8565b600060405180830381600087803b158015613aa257600080fd5b505af1158015613ab6573d6000803e3d6000fd5b505050505b806001600160a01b031663f670ebe384601b60159054906101000a900460ff1680613afe57506001600160a01b0384166000908152601c602052604090205460ff165b6040518363ffffffff1660e01b8152600401613b1b929190614f33565b600060405180830381600087803b158015613b3557600080fd5b505af1925050508015613b46575060015b613b8f57613b526150e2565b80613b5d5750613b6d565b613b6782826140bd565b50613b8f565b613b8f8160405180606001604052806023815260200161527e602391396140bd565b50600101613a12565b506010805460ff191690556000613bad613dd2565b60118190559050613bbd816142ce565b6012555050601b805460ff60a01b1916600160a01b1790555050565b88548814613bf45760088901805460ff191660011790558789555b86896001015414613c175760088901805460ff1916600190811790915589018790555b85896002015414613c395760088901805460ff19166001179055600289018690555b84896003015414613c5b5760088901805460ff19166001179055600389018590555b83896004015414613c7d5760088901805460ff19166001179055600489018490555b82896005015414613c9f5760088901805460ff19166001179055600589018390555b81896006015414613cc15760088901805460ff19166001179055600689018290555b805160078a015414613cf7578051613ce29060078b019060208401906144a3565b5060088901805460ff19166001179055613db6565b60005b8151811015613db457818181518110613d0f57fe5b60200260200101516001600160a01b03168a6007018281548110613d2f57fe5b6000918252602090912001546001600160a01b031614613dac5760088a01805460ff191660011790558151829082908110613d6657fe5b60200260200101518a6007018281548110613d7d57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600101613cfa565b505b5050506008909501805461ff0019166101001790555050505050565b60007f00000000000000000000000000000000000000000000000000000000000000b47f000000000000000000000000000000000000000000000000000000006143aba1420381613e1f57fe5b04905090565b806001600160a01b031663555989da6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613e6057600080fd5b505af1158015613e74573d6000803e3d6000fd5b5050506001600160a01b0382166000908152601c60209081526040808320805460ff199081169091556016835281842080548216905560159092529091208054909116905550613eca613ec5612abc565b61433d565b7fa0985424f2efdcae4b57a7c84bbf0a0b19f93054f21e9eb1cfcd5a59813fe1da8160006040516124d3929190614ee9565b805160005b81811015613f7e5760156000848381518110613f1957fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16613f76576040518060600160405280602681526020016152a16026913960405162461bcd60e51b8152600401610b069190614f43565b600101613f01565b505050565b7f79f4c7cc43bfb79f5a3aad0d92f75b6fed7db061bb5cc2580a01c8132711b881826011546001604051613fb993929190614f04565b60405180910390a1613fcb828261175a565b61148282614021565b7f000000000000000000000000000000000000000000000000000000006143aba1600182017f00000000000000000000000000000000000000000000000000000000000000b40201919050565b601154604051639de6f92760e01b81526001600160a01b03831691639de6f9279161404f9190600401614f78565b600060405180830381600087803b15801561406957600080fd5b505af192505050801561407a575060015b61069b576140866150e2565b80614091575061409b565b61383782826143a1565b6138a3816040518060600160405280602b81526020016151e4602b91396143a1565b7f61156899176547b8075bfa81fa2996c6057ce9c71320884b11c0179d9dc2e462826140e7613dd2565b6040516140f5929190614cf2565b60405180910390a1614107828261175a565b601b54600160a81b900460ff168061413757506001600160a01b0382166000908152601c602052604090205460ff165b15614164576001600160a01b0382166000908152601660205260409020805460ff19166001179055611482565b60405163f670ebe360e01b81526001600160a01b0383169063f670ebe39061419490600090600190600401614f33565b600060405180830381600087803b1580156141ae57600080fd5b505af19250505080156141bf575060015b611482576141cb6150e2565b806141d65750614249565b6001600160a01b0383166000908152601660205260409020805460ff191660011790557f61156899176547b8075bfa81fa2996c6057ce9c71320884b11c0179d9dc2e46283614223613dd2565b604051614231929190614cf2565b60405180910390a1614243838261175a565b50613704565b6001600160a01b0382166000908152601660205260409020805460ff191660011790557f61156899176547b8075bfa81fa2996c6057ce9c71320884b11c0179d9dc2e46282614296613dd2565b6040516142a4929190614cf2565b60405180910390a1613704826040518060600160405280602c8152602001615252602c913961175a565b7f000000000000000000000000000000000000000000000000000000006143aba1600182017f00000000000000000000000000000000000000000000000000000000000000b402017f000000000000000000000000000000000000000000000000000000000000005a01919050565b805160005b81811015613f7e5761439983828151811061435957fe5b60200260200101516001600160a01b03166318931c356040518163ffffffff1660e01b815260040160006040518083038186803b15801561257857600080fd5b600101614342565b7f79f4c7cc43bfb79f5a3aad0d92f75b6fed7db061bb5cc2580a01c8132711b8818260115460026040516143d793929190614f04565b60405180910390a16143e9828261175a565b60115460405163974d7a6b60e01b81526001600160a01b0384169163974d7a6b916109689190600401614f78565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261444d5760008555614493565b82601f1061446657805160ff1916838001178555614493565b82800160010185558215614493579182015b82811115614493578251825591602001919060010190614478565b5061449f9291506144f8565b5090565b828054828255906000526020600020908101928215614493579160200282015b8281111561449357825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906144c3565b5b8082111561449f57600081556001016144f9565b600082601f83011261451d578081fd5b8151602061453261452d83615072565b61504f565b828152818101908583018385028701840188101561454e578586fd5b855b8581101561456c57815184529284019290840190600101614550565b5090979650505050505050565b8035801515811461241257600080fd5b600082601f830112614599578081fd5b81516145a761452d8261508f565b8181528460208386010111156145bb578283fd5b6145cc8260208301602087016150b0565b949350505050565b6000602082840312156145e5578081fd5b81356145f081615186565b9392505050565b60008060408385031215614609578081fd5b823561461481615186565b915060208301356001600160401b0381111561462e578182fd5b8301601f8101851361463e578182fd5b803561464c61452d8261508f565b818152866020838501011115614660578384fd5b81602084016020830137908101602001929092525090939092509050565b600080600060608486031215614692578081fd5b83516001600160401b03808211156146a8578283fd5b818601915086601f8301126146bb578283fd5b815160206146cb61452d83615072565b82815281810190858301838502870184018c10156146e7578788fd5b8796505b848710156147125780516146fe81615186565b8352600196909601959183019183016146eb565b509189015191975090935050508082111561472b578283fd5b506147388682870161450d565b925050604084015190509250925092565b6000602080838503121561475b578182fd5b82516001600160401b03811115614770578283fd5b8301601f81018513614780578283fd5b805161478e61452d82615072565b81815283810190838501858402850186018910156147aa578687fd5b8694505b838510156147d55780516147c181615186565b8352600194909401939185019185016147ae565b50979650505050505050565b600060208083850312156147f3578182fd5b82516001600160401b03811115614808578283fd5b8301601f81018513614818578283fd5b805161482661452d82615072565b81815283810190838501865b8481101561485b576148498a888451890101614589565b84529286019290860190600101614832565b509098975050505050505050565b60006020828403121561487a578081fd5b6145f082614579565b600080600080600060a0868803121561489a578283fd5b85356148a581615186565b945060208601356148b581615186565b935060408601356148c581615186565b925060608601356148d581615186565b915060808601356148e581615186565b809150509295509295909350565b60008060408385031215614905578182fd5b823561491081615186565b91506020838101356001600160401b0381111561492b578283fd5b8401601f8101861361493b578283fd5b803561494961452d82615072565b81815283810190838501858402850186018a1015614965578687fd5b8694505b8385101561499057803561497c81615186565b835260019490940193918501918501614969565b5080955050505050509250929050565b600080604083850312156149b2578182fd5b82356149bd81615186565b91506149cb60208401614579565b90509250929050565b600080600080608085870312156149e9578182fd5b84356149f481615186565b93506020850135614a0481615186565b9250614a1260408601614579565b9150614a2060608601614579565b905092959194509250565b60008060408385031215614a3d578182fd5b8235614a4881615186565b91506020830135614a5881615186565b809150509250929050565b600060208284031215614a74578081fd5b81516145f081615186565b600060208284031215614a90578081fd5b81516001600160401b03811115614aa5578182fd5b6145cc84828501614589565b600060208284031215614ac2578081fd5b5035919050565b600060208284031215614ada578081fd5b5051919050565b60008060408385031215614af3578182fd5b50508035926020909101359150565b60008060408385031215614b14578182fd5b505080516020909101519092909150565b600080600080600080600080610100898b031215614b41578586fd5b883597506020808a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b03811115614b88578283fd5b8a01601f81018c13614b98578283fd5b8035614ba661452d82615072565b8082825284820191508484018f868786028701011115614bc4578687fd5b8694505b83851015614bef578035614bdb81615186565b835260019490940193918501918501614bc8565b5080955050505050509295985092959890939650565b6000815180845260208085019450808401835b83811015614c3d5781516001600160a01b031687529582019590820190600101614c18565b509495945050505050565b6000815480845260208085019450838352808320835b83811015614c3d5781546001600160a01b031687529582019560019182019101614c5e565b6000815180845260208085019450808401835b83811015614c3d57815187529582019590820190600101614c96565b60008151808452614cca8160208601602086016150b0565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03831681526040602082018190526000906145cc90830184614cb2565b600060018060a01b038516825283602083015260606040830152614d566060830184614cb2565b95945050505050565b6000610120808352614d738184018d614c05565b90508281036020840152614d87818c614c83565b604084019a909a52505060608101969096526001600160a01b0394909416608086015260a085019290925260c084015260e08301526101009091015292915050565b6000602082526145f06020830184614c48565b6000602082526145f06020830184614c05565b600060a08252614e0260a0830188614c83565b602083820381850152614e158289614c83565b848103604086015287518082529092508183019082810284018301838a01865b83811015614e6357601f19878403018552614e51838351614cb2565b94860194925090850190600101614e35565b50508681036060880152614e77818a614c05565b955050505050508260808301529695505050505050565b901515815260200190565b600084151582526020606081840152614eb56060840186614c05565b8381036040850152845180825282860191830190845b8181101561485b578351151583529284019291840191600101614ecb565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b0384168152602081018390526060810160068310614f2557fe5b826040830152949350505050565b9182521515602082015260400190565b6000602082526145f06020830184614cb2565b6001600160c01b039290921682526001600160401b0316602082015260400190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60008882528760208301528660408301528560608301528460808301528360a083015260e060c0830152614fff60e0830184614c48565b9998505050505050505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b6040518181016001600160401b038111828210171561506a57fe5b604052919050565b60006001600160401b0382111561508557fe5b5060209081020190565b60006001600160401b038211156150a257fe5b50601f01601f191660200190565b60005b838110156150cb5781810151838201526020016150b3565b83811115612cab5750506000910152565b60e01c90565b600060443d10156150f257610565565b600481823e6308c379a061510682516150dc565b1461511057610565565b6040513d600319016004823e80513d6001600160401b03816024840111818411171561513f5750505050610565565b828401925082519150808211156151595750505050610565565b503d8301602082840101111561517157505050610565565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461069b57600080fdfe4d6178207472757374656420616464726573736573206c656e677468206578636565646564756e6b6e6f776e206661696c2e2073657474696e6720636c65616e757020626c6f636b756e6b6e6f776e206661696c2e2066616c6c6261636b2066696e616c697a652070726963652065706f6368756e6b6e6f776e206661696c2e2066696e616c697a652070726963652065706f6368556e6b6e6f776e206661696c207768656e20636c6f73696e672065787069726564756e6b6e6f776e206661696c2e2066616c6c6261636b20696e69742065706f636820666f722072657665616c756e6b6e6f776e206661696c2e20696e69742065706f636820666f722072657665616c4173736574204654534f206e6f74206d616e61676564206279206674736f206d616e61676572a264697066735822122031a4df8ff2e3927ffe942baa09d7ccfecacbd707bb5bbb9857ab0f5bfd8dccfd64736f6c63430007060033",
}

// FMABI is the input ABI used to generate the binding from.
// Deprecated: Use FMMetaData.ABI instead.
var FMABI = FMMetaData.ABI

// FMBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FMMetaData.Bin instead.
var FMBin = FMMetaData.Bin

// DeployFM deploys a new Ethereum contract, binding an instance of FM to it.
func DeployFM(auth *bind.TransactOpts, backend bind.ContractBackend, _governance common.Address, _flareDaemon common.Address, _priceSubmitter common.Address, _firstEpochStartTs *big.Int, _priceEpochDurationSeconds *big.Int, _revealEpochDurationSeconds *big.Int, _rewardEpochsStartTs *big.Int, _rewardEpochDurationSeconds *big.Int, _votePowerIntervalFraction *big.Int) (common.Address, *types.Transaction, *FM, error) {
	parsed, err := FMMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FMBin), backend, _governance, _flareDaemon, _priceSubmitter, _firstEpochStartTs, _priceEpochDurationSeconds, _revealEpochDurationSeconds, _rewardEpochsStartTs, _rewardEpochDurationSeconds, _votePowerIntervalFraction)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FM{FMCaller: FMCaller{contract: contract}, FMTransactor: FMTransactor{contract: contract}, FMFilterer: FMFilterer{contract: contract}}, nil
}

// FM is an auto generated Go binding around an Ethereum contract.
type FM struct {
	FMCaller     // Read-only binding to the contract
	FMTransactor // Write-only binding to the contract
	FMFilterer   // Log filterer for contract events
}

// FMCaller is an auto generated read-only Go binding around an Ethereum contract.
type FMCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FMTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FMTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FMFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FMFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FMSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FMSession struct {
	Contract     *FM               // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FMCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FMCallerSession struct {
	Contract *FMCaller     // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// FMTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FMTransactorSession struct {
	Contract     *FMTransactor     // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FMRaw is an auto generated low-level Go binding around an Ethereum contract.
type FMRaw struct {
	Contract *FM // Generic contract binding to access the raw methods on
}

// FMCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FMCallerRaw struct {
	Contract *FMCaller // Generic read-only contract binding to access the raw methods on
}

// FMTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FMTransactorRaw struct {
	Contract *FMTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFM creates a new instance of FM, bound to a specific deployed contract.
func NewFM(address common.Address, backend bind.ContractBackend) (*FM, error) {
	contract, err := bindFM(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FM{FMCaller: FMCaller{contract: contract}, FMTransactor: FMTransactor{contract: contract}, FMFilterer: FMFilterer{contract: contract}}, nil
}

// NewFMCaller creates a new read-only instance of FM, bound to a specific deployed contract.
func NewFMCaller(address common.Address, caller bind.ContractCaller) (*FMCaller, error) {
	contract, err := bindFM(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FMCaller{contract: contract}, nil
}

// NewFMTransactor creates a new write-only instance of FM, bound to a specific deployed contract.
func NewFMTransactor(address common.Address, transactor bind.ContractTransactor) (*FMTransactor, error) {
	contract, err := bindFM(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FMTransactor{contract: contract}, nil
}

// NewFMFilterer creates a new log filterer instance of FM, bound to a specific deployed contract.
func NewFMFilterer(address common.Address, filterer bind.ContractFilterer) (*FMFilterer, error) {
	contract, err := bindFM(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FMFilterer{contract: contract}, nil
}

// bindFM binds a generic wrapper to an already deployed contract.
func bindFM(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FMABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FM *FMRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FM.Contract.FMCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FM *FMRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FM.Contract.FMTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FM *FMRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FM.Contract.FMTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FM *FMCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FM.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FM *FMTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FM.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FM *FMTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FM.Contract.contract.Transact(opts, method, params...)
}

// MAXTRUSTEDADDRESSESLENGTH is a free data retrieval call binding the contract method 0x69b11ac6.
//
// Solidity: function MAX_TRUSTED_ADDRESSES_LENGTH() view returns(uint256)
func (_FM *FMCaller) MAXTRUSTEDADDRESSESLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "MAX_TRUSTED_ADDRESSES_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTRUSTEDADDRESSESLENGTH is a free data retrieval call binding the contract method 0x69b11ac6.
//
// Solidity: function MAX_TRUSTED_ADDRESSES_LENGTH() view returns(uint256)
func (_FM *FMSession) MAXTRUSTEDADDRESSESLENGTH() (*big.Int, error) {
	return _FM.Contract.MAXTRUSTEDADDRESSESLENGTH(&_FM.CallOpts)
}

// MAXTRUSTEDADDRESSESLENGTH is a free data retrieval call binding the contract method 0x69b11ac6.
//
// Solidity: function MAX_TRUSTED_ADDRESSES_LENGTH() view returns(uint256)
func (_FM *FMCallerSession) MAXTRUSTEDADDRESSESLENGTH() (*big.Int, error) {
	return _FM.Contract.MAXTRUSTEDADDRESSESLENGTH(&_FM.CallOpts)
}

// Active is a free data retrieval call binding the contract method 0x02fb0c5e.
//
// Solidity: function active() view returns(bool)
func (_FM *FMCaller) Active(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "active")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Active is a free data retrieval call binding the contract method 0x02fb0c5e.
//
// Solidity: function active() view returns(bool)
func (_FM *FMSession) Active() (bool, error) {
	return _FM.Contract.Active(&_FM.CallOpts)
}

// Active is a free data retrieval call binding the contract method 0x02fb0c5e.
//
// Solidity: function active() view returns(bool)
func (_FM *FMCallerSession) Active() (bool, error) {
	return _FM.Contract.Active(&_FM.CallOpts)
}

// CleanupBlockNumberManager is a free data retrieval call binding the contract method 0x4eac870f.
//
// Solidity: function cleanupBlockNumberManager() view returns(address)
func (_FM *FMCaller) CleanupBlockNumberManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "cleanupBlockNumberManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CleanupBlockNumberManager is a free data retrieval call binding the contract method 0x4eac870f.
//
// Solidity: function cleanupBlockNumberManager() view returns(address)
func (_FM *FMSession) CleanupBlockNumberManager() (common.Address, error) {
	return _FM.Contract.CleanupBlockNumberManager(&_FM.CallOpts)
}

// CleanupBlockNumberManager is a free data retrieval call binding the contract method 0x4eac870f.
//
// Solidity: function cleanupBlockNumberManager() view returns(address)
func (_FM *FMCallerSession) CleanupBlockNumberManager() (common.Address, error) {
	return _FM.Contract.CleanupBlockNumberManager(&_FM.CallOpts)
}

// ErrorData is a free data retrieval call binding the contract method 0xe371aef0.
//
// Solidity: function errorData() view returns(uint192 totalRevertedErrors, uint64 lastErrorTypeIndex)
func (_FM *FMCaller) ErrorData(opts *bind.CallOpts) (struct {
	TotalRevertedErrors *big.Int
	LastErrorTypeIndex  uint64
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "errorData")

	outstruct := new(struct {
		TotalRevertedErrors *big.Int
		LastErrorTypeIndex  uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalRevertedErrors = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LastErrorTypeIndex = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// ErrorData is a free data retrieval call binding the contract method 0xe371aef0.
//
// Solidity: function errorData() view returns(uint192 totalRevertedErrors, uint64 lastErrorTypeIndex)
func (_FM *FMSession) ErrorData() (struct {
	TotalRevertedErrors *big.Int
	LastErrorTypeIndex  uint64
}, error) {
	return _FM.Contract.ErrorData(&_FM.CallOpts)
}

// ErrorData is a free data retrieval call binding the contract method 0xe371aef0.
//
// Solidity: function errorData() view returns(uint192 totalRevertedErrors, uint64 lastErrorTypeIndex)
func (_FM *FMCallerSession) ErrorData() (struct {
	TotalRevertedErrors *big.Int
	LastErrorTypeIndex  uint64
}, error) {
	return _FM.Contract.ErrorData(&_FM.CallOpts)
}

// FlareDaemon is a free data retrieval call binding the contract method 0xa1077532.
//
// Solidity: function flareDaemon() view returns(address)
func (_FM *FMCaller) FlareDaemon(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "flareDaemon")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FlareDaemon is a free data retrieval call binding the contract method 0xa1077532.
//
// Solidity: function flareDaemon() view returns(address)
func (_FM *FMSession) FlareDaemon() (common.Address, error) {
	return _FM.Contract.FlareDaemon(&_FM.CallOpts)
}

// FlareDaemon is a free data retrieval call binding the contract method 0xa1077532.
//
// Solidity: function flareDaemon() view returns(address)
func (_FM *FMCallerSession) FlareDaemon() (common.Address, error) {
	return _FM.Contract.FlareDaemon(&_FM.CallOpts)
}

// FtsoRegistry is a free data retrieval call binding the contract method 0x38b5f869.
//
// Solidity: function ftsoRegistry() view returns(address)
func (_FM *FMCaller) FtsoRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "ftsoRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FtsoRegistry is a free data retrieval call binding the contract method 0x38b5f869.
//
// Solidity: function ftsoRegistry() view returns(address)
func (_FM *FMSession) FtsoRegistry() (common.Address, error) {
	return _FM.Contract.FtsoRegistry(&_FM.CallOpts)
}

// FtsoRegistry is a free data retrieval call binding the contract method 0x38b5f869.
//
// Solidity: function ftsoRegistry() view returns(address)
func (_FM *FMCallerSession) FtsoRegistry() (common.Address, error) {
	return _FM.Contract.FtsoRegistry(&_FM.CallOpts)
}

// GetCurrentPriceEpochData is a free data retrieval call binding the contract method 0x93a79025.
//
// Solidity: function getCurrentPriceEpochData() view returns(uint256 priceEpochId, uint256 priceEpochStartTimestamp, uint256 priceEpochEndTimestamp, uint256 priceEpochRevealEndTimestamp, uint256 currentTimestamp)
func (_FM *FMCaller) GetCurrentPriceEpochData(opts *bind.CallOpts) (struct {
	PriceEpochId                 *big.Int
	PriceEpochStartTimestamp     *big.Int
	PriceEpochEndTimestamp       *big.Int
	PriceEpochRevealEndTimestamp *big.Int
	CurrentTimestamp             *big.Int
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getCurrentPriceEpochData")

	outstruct := new(struct {
		PriceEpochId                 *big.Int
		PriceEpochStartTimestamp     *big.Int
		PriceEpochEndTimestamp       *big.Int
		PriceEpochRevealEndTimestamp *big.Int
		CurrentTimestamp             *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PriceEpochId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PriceEpochStartTimestamp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.PriceEpochEndTimestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PriceEpochRevealEndTimestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.CurrentTimestamp = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetCurrentPriceEpochData is a free data retrieval call binding the contract method 0x93a79025.
//
// Solidity: function getCurrentPriceEpochData() view returns(uint256 priceEpochId, uint256 priceEpochStartTimestamp, uint256 priceEpochEndTimestamp, uint256 priceEpochRevealEndTimestamp, uint256 currentTimestamp)
func (_FM *FMSession) GetCurrentPriceEpochData() (struct {
	PriceEpochId                 *big.Int
	PriceEpochStartTimestamp     *big.Int
	PriceEpochEndTimestamp       *big.Int
	PriceEpochRevealEndTimestamp *big.Int
	CurrentTimestamp             *big.Int
}, error) {
	return _FM.Contract.GetCurrentPriceEpochData(&_FM.CallOpts)
}

// GetCurrentPriceEpochData is a free data retrieval call binding the contract method 0x93a79025.
//
// Solidity: function getCurrentPriceEpochData() view returns(uint256 priceEpochId, uint256 priceEpochStartTimestamp, uint256 priceEpochEndTimestamp, uint256 priceEpochRevealEndTimestamp, uint256 currentTimestamp)
func (_FM *FMCallerSession) GetCurrentPriceEpochData() (struct {
	PriceEpochId                 *big.Int
	PriceEpochStartTimestamp     *big.Int
	PriceEpochEndTimestamp       *big.Int
	PriceEpochRevealEndTimestamp *big.Int
	CurrentTimestamp             *big.Int
}, error) {
	return _FM.Contract.GetCurrentPriceEpochData(&_FM.CallOpts)
}

// GetCurrentRewardEpoch is a free data retrieval call binding the contract method 0xe7c830d4.
//
// Solidity: function getCurrentRewardEpoch() view returns(uint256)
func (_FM *FMCaller) GetCurrentRewardEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getCurrentRewardEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentRewardEpoch is a free data retrieval call binding the contract method 0xe7c830d4.
//
// Solidity: function getCurrentRewardEpoch() view returns(uint256)
func (_FM *FMSession) GetCurrentRewardEpoch() (*big.Int, error) {
	return _FM.Contract.GetCurrentRewardEpoch(&_FM.CallOpts)
}

// GetCurrentRewardEpoch is a free data retrieval call binding the contract method 0xe7c830d4.
//
// Solidity: function getCurrentRewardEpoch() view returns(uint256)
func (_FM *FMCallerSession) GetCurrentRewardEpoch() (*big.Int, error) {
	return _FM.Contract.GetCurrentRewardEpoch(&_FM.CallOpts)
}

// GetFallbackMode is a free data retrieval call binding the contract method 0x4b48dd5e.
//
// Solidity: function getFallbackMode() view returns(bool _fallbackMode, address[] _ftsos, bool[] _ftsoInFallbackMode)
func (_FM *FMCaller) GetFallbackMode(opts *bind.CallOpts) (struct {
	FallbackMode       bool
	Ftsos              []common.Address
	FtsoInFallbackMode []bool
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getFallbackMode")

	outstruct := new(struct {
		FallbackMode       bool
		Ftsos              []common.Address
		FtsoInFallbackMode []bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FallbackMode = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Ftsos = *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	outstruct.FtsoInFallbackMode = *abi.ConvertType(out[2], new([]bool)).(*[]bool)

	return *outstruct, err

}

// GetFallbackMode is a free data retrieval call binding the contract method 0x4b48dd5e.
//
// Solidity: function getFallbackMode() view returns(bool _fallbackMode, address[] _ftsos, bool[] _ftsoInFallbackMode)
func (_FM *FMSession) GetFallbackMode() (struct {
	FallbackMode       bool
	Ftsos              []common.Address
	FtsoInFallbackMode []bool
}, error) {
	return _FM.Contract.GetFallbackMode(&_FM.CallOpts)
}

// GetFallbackMode is a free data retrieval call binding the contract method 0x4b48dd5e.
//
// Solidity: function getFallbackMode() view returns(bool _fallbackMode, address[] _ftsos, bool[] _ftsoInFallbackMode)
func (_FM *FMCallerSession) GetFallbackMode() (struct {
	FallbackMode       bool
	Ftsos              []common.Address
	FtsoInFallbackMode []bool
}, error) {
	return _FM.Contract.GetFallbackMode(&_FM.CallOpts)
}

// GetFtsos is a free data retrieval call binding the contract method 0xce69f833.
//
// Solidity: function getFtsos() view returns(address[] _ftsos)
func (_FM *FMCaller) GetFtsos(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getFtsos")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetFtsos is a free data retrieval call binding the contract method 0xce69f833.
//
// Solidity: function getFtsos() view returns(address[] _ftsos)
func (_FM *FMSession) GetFtsos() ([]common.Address, error) {
	return _FM.Contract.GetFtsos(&_FM.CallOpts)
}

// GetFtsos is a free data retrieval call binding the contract method 0xce69f833.
//
// Solidity: function getFtsos() view returns(address[] _ftsos)
func (_FM *FMCallerSession) GetFtsos() ([]common.Address, error) {
	return _FM.Contract.GetFtsos(&_FM.CallOpts)
}

// GetPriceEpochConfiguration is a free data retrieval call binding the contract method 0x144e1591.
//
// Solidity: function getPriceEpochConfiguration() view returns(uint256 _firstPriceEpochStartTs, uint256 _priceEpochDurationSeconds, uint256 _revealEpochDurationSeconds)
func (_FM *FMCaller) GetPriceEpochConfiguration(opts *bind.CallOpts) (struct {
	FirstPriceEpochStartTs     *big.Int
	PriceEpochDurationSeconds  *big.Int
	RevealEpochDurationSeconds *big.Int
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getPriceEpochConfiguration")

	outstruct := new(struct {
		FirstPriceEpochStartTs     *big.Int
		PriceEpochDurationSeconds  *big.Int
		RevealEpochDurationSeconds *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FirstPriceEpochStartTs = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PriceEpochDurationSeconds = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.RevealEpochDurationSeconds = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPriceEpochConfiguration is a free data retrieval call binding the contract method 0x144e1591.
//
// Solidity: function getPriceEpochConfiguration() view returns(uint256 _firstPriceEpochStartTs, uint256 _priceEpochDurationSeconds, uint256 _revealEpochDurationSeconds)
func (_FM *FMSession) GetPriceEpochConfiguration() (struct {
	FirstPriceEpochStartTs     *big.Int
	PriceEpochDurationSeconds  *big.Int
	RevealEpochDurationSeconds *big.Int
}, error) {
	return _FM.Contract.GetPriceEpochConfiguration(&_FM.CallOpts)
}

// GetPriceEpochConfiguration is a free data retrieval call binding the contract method 0x144e1591.
//
// Solidity: function getPriceEpochConfiguration() view returns(uint256 _firstPriceEpochStartTs, uint256 _priceEpochDurationSeconds, uint256 _revealEpochDurationSeconds)
func (_FM *FMCallerSession) GetPriceEpochConfiguration() (struct {
	FirstPriceEpochStartTs     *big.Int
	PriceEpochDurationSeconds  *big.Int
	RevealEpochDurationSeconds *big.Int
}, error) {
	return _FM.Contract.GetPriceEpochConfiguration(&_FM.CallOpts)
}

// GetPriceSubmitter is a free data retrieval call binding the contract method 0x0e063d7d.
//
// Solidity: function getPriceSubmitter() view returns(address)
func (_FM *FMCaller) GetPriceSubmitter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getPriceSubmitter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPriceSubmitter is a free data retrieval call binding the contract method 0x0e063d7d.
//
// Solidity: function getPriceSubmitter() view returns(address)
func (_FM *FMSession) GetPriceSubmitter() (common.Address, error) {
	return _FM.Contract.GetPriceSubmitter(&_FM.CallOpts)
}

// GetPriceSubmitter is a free data retrieval call binding the contract method 0x0e063d7d.
//
// Solidity: function getPriceSubmitter() view returns(address)
func (_FM *FMCallerSession) GetPriceSubmitter() (common.Address, error) {
	return _FM.Contract.GetPriceSubmitter(&_FM.CallOpts)
}

// GetRewardEpochVotePowerBlock is a free data retrieval call binding the contract method 0xf2edab5a.
//
// Solidity: function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) view returns(uint256)
func (_FM *FMCaller) GetRewardEpochVotePowerBlock(opts *bind.CallOpts, _rewardEpoch *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getRewardEpochVotePowerBlock", _rewardEpoch)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRewardEpochVotePowerBlock is a free data retrieval call binding the contract method 0xf2edab5a.
//
// Solidity: function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) view returns(uint256)
func (_FM *FMSession) GetRewardEpochVotePowerBlock(_rewardEpoch *big.Int) (*big.Int, error) {
	return _FM.Contract.GetRewardEpochVotePowerBlock(&_FM.CallOpts, _rewardEpoch)
}

// GetRewardEpochVotePowerBlock is a free data retrieval call binding the contract method 0xf2edab5a.
//
// Solidity: function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) view returns(uint256)
func (_FM *FMCallerSession) GetRewardEpochVotePowerBlock(_rewardEpoch *big.Int) (*big.Int, error) {
	return _FM.Contract.GetRewardEpochVotePowerBlock(&_FM.CallOpts, _rewardEpoch)
}

// GetVotePowerIntervalFraction is a free data retrieval call binding the contract method 0x60f2c5b2.
//
// Solidity: function getVotePowerIntervalFraction() view returns(uint256)
func (_FM *FMCaller) GetVotePowerIntervalFraction(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "getVotePowerIntervalFraction")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotePowerIntervalFraction is a free data retrieval call binding the contract method 0x60f2c5b2.
//
// Solidity: function getVotePowerIntervalFraction() view returns(uint256)
func (_FM *FMSession) GetVotePowerIntervalFraction() (*big.Int, error) {
	return _FM.Contract.GetVotePowerIntervalFraction(&_FM.CallOpts)
}

// GetVotePowerIntervalFraction is a free data retrieval call binding the contract method 0x60f2c5b2.
//
// Solidity: function getVotePowerIntervalFraction() view returns(uint256)
func (_FM *FMCallerSession) GetVotePowerIntervalFraction() (*big.Int, error) {
	return _FM.Contract.GetVotePowerIntervalFraction(&_FM.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_FM *FMCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_FM *FMSession) Governance() (common.Address, error) {
	return _FM.Contract.Governance(&_FM.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_FM *FMCallerSession) Governance() (common.Address, error) {
	return _FM.Contract.Governance(&_FM.CallOpts)
}

// LastRewardedFtsoAddress is a free data retrieval call binding the contract method 0x2fd8eb7d.
//
// Solidity: function lastRewardedFtsoAddress() view returns(address)
func (_FM *FMCaller) LastRewardedFtsoAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "lastRewardedFtsoAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LastRewardedFtsoAddress is a free data retrieval call binding the contract method 0x2fd8eb7d.
//
// Solidity: function lastRewardedFtsoAddress() view returns(address)
func (_FM *FMSession) LastRewardedFtsoAddress() (common.Address, error) {
	return _FM.Contract.LastRewardedFtsoAddress(&_FM.CallOpts)
}

// LastRewardedFtsoAddress is a free data retrieval call binding the contract method 0x2fd8eb7d.
//
// Solidity: function lastRewardedFtsoAddress() view returns(address)
func (_FM *FMCallerSession) LastRewardedFtsoAddress() (common.Address, error) {
	return _FM.Contract.LastRewardedFtsoAddress(&_FM.CallOpts)
}

// PriceSubmitter is a free data retrieval call binding the contract method 0xf937d6ad.
//
// Solidity: function priceSubmitter() view returns(address)
func (_FM *FMCaller) PriceSubmitter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "priceSubmitter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PriceSubmitter is a free data retrieval call binding the contract method 0xf937d6ad.
//
// Solidity: function priceSubmitter() view returns(address)
func (_FM *FMSession) PriceSubmitter() (common.Address, error) {
	return _FM.Contract.PriceSubmitter(&_FM.CallOpts)
}

// PriceSubmitter is a free data retrieval call binding the contract method 0xf937d6ad.
//
// Solidity: function priceSubmitter() view returns(address)
func (_FM *FMCallerSession) PriceSubmitter() (common.Address, error) {
	return _FM.Contract.PriceSubmitter(&_FM.CallOpts)
}

// ProposedGovernance is a free data retrieval call binding the contract method 0x60f7ac97.
//
// Solidity: function proposedGovernance() view returns(address)
func (_FM *FMCaller) ProposedGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "proposedGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProposedGovernance is a free data retrieval call binding the contract method 0x60f7ac97.
//
// Solidity: function proposedGovernance() view returns(address)
func (_FM *FMSession) ProposedGovernance() (common.Address, error) {
	return _FM.Contract.ProposedGovernance(&_FM.CallOpts)
}

// ProposedGovernance is a free data retrieval call binding the contract method 0x60f7ac97.
//
// Solidity: function proposedGovernance() view returns(address)
func (_FM *FMCallerSession) ProposedGovernance() (common.Address, error) {
	return _FM.Contract.ProposedGovernance(&_FM.CallOpts)
}

// RewardEpochDurationSeconds is a free data retrieval call binding the contract method 0x85f3c9c9.
//
// Solidity: function rewardEpochDurationSeconds() view returns(uint256)
func (_FM *FMCaller) RewardEpochDurationSeconds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "rewardEpochDurationSeconds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardEpochDurationSeconds is a free data retrieval call binding the contract method 0x85f3c9c9.
//
// Solidity: function rewardEpochDurationSeconds() view returns(uint256)
func (_FM *FMSession) RewardEpochDurationSeconds() (*big.Int, error) {
	return _FM.Contract.RewardEpochDurationSeconds(&_FM.CallOpts)
}

// RewardEpochDurationSeconds is a free data retrieval call binding the contract method 0x85f3c9c9.
//
// Solidity: function rewardEpochDurationSeconds() view returns(uint256)
func (_FM *FMCallerSession) RewardEpochDurationSeconds() (*big.Int, error) {
	return _FM.Contract.RewardEpochDurationSeconds(&_FM.CallOpts)
}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 ) view returns(uint256 votepowerBlock, uint256 startBlock, uint256 startTimestamp)
func (_FM *FMCaller) RewardEpochs(opts *bind.CallOpts, arg0 *big.Int) (struct {
	VotepowerBlock *big.Int
	StartBlock     *big.Int
	StartTimestamp *big.Int
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "rewardEpochs", arg0)

	outstruct := new(struct {
		VotepowerBlock *big.Int
		StartBlock     *big.Int
		StartTimestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.VotepowerBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.StartBlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.StartTimestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 ) view returns(uint256 votepowerBlock, uint256 startBlock, uint256 startTimestamp)
func (_FM *FMSession) RewardEpochs(arg0 *big.Int) (struct {
	VotepowerBlock *big.Int
	StartBlock     *big.Int
	StartTimestamp *big.Int
}, error) {
	return _FM.Contract.RewardEpochs(&_FM.CallOpts, arg0)
}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 ) view returns(uint256 votepowerBlock, uint256 startBlock, uint256 startTimestamp)
func (_FM *FMCallerSession) RewardEpochs(arg0 *big.Int) (struct {
	VotepowerBlock *big.Int
	StartBlock     *big.Int
	StartTimestamp *big.Int
}, error) {
	return _FM.Contract.RewardEpochs(&_FM.CallOpts, arg0)
}

// RewardEpochsStartTs is a free data retrieval call binding the contract method 0xa578f55b.
//
// Solidity: function rewardEpochsStartTs() view returns(uint256)
func (_FM *FMCaller) RewardEpochsStartTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "rewardEpochsStartTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardEpochsStartTs is a free data retrieval call binding the contract method 0xa578f55b.
//
// Solidity: function rewardEpochsStartTs() view returns(uint256)
func (_FM *FMSession) RewardEpochsStartTs() (*big.Int, error) {
	return _FM.Contract.RewardEpochsStartTs(&_FM.CallOpts)
}

// RewardEpochsStartTs is a free data retrieval call binding the contract method 0xa578f55b.
//
// Solidity: function rewardEpochsStartTs() view returns(uint256)
func (_FM *FMCallerSession) RewardEpochsStartTs() (*big.Int, error) {
	return _FM.Contract.RewardEpochsStartTs(&_FM.CallOpts)
}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_FM *FMCaller) RewardManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "rewardManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_FM *FMSession) RewardManager() (common.Address, error) {
	return _FM.Contract.RewardManager(&_FM.CallOpts)
}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_FM *FMCallerSession) RewardManager() (common.Address, error) {
	return _FM.Contract.RewardManager(&_FM.CallOpts)
}

// Settings is a free data retrieval call binding the contract method 0xe06174e4.
//
// Solidity: function settings() view returns(uint256 maxVotePowerNatThresholdFraction, uint256 maxVotePowerAssetThresholdFraction, uint256 lowAssetUSDThreshold, uint256 highAssetUSDThreshold, uint256 highAssetTurnoutThresholdBIPS, uint256 lowNatTurnoutThresholdBIPS, uint256 rewardExpiryOffsetSeconds, bool changed, bool initialized)
func (_FM *FMCaller) Settings(opts *bind.CallOpts) (struct {
	MaxVotePowerNatThresholdFraction   *big.Int
	MaxVotePowerAssetThresholdFraction *big.Int
	LowAssetUSDThreshold               *big.Int
	HighAssetUSDThreshold              *big.Int
	HighAssetTurnoutThresholdBIPS      *big.Int
	LowNatTurnoutThresholdBIPS         *big.Int
	RewardExpiryOffsetSeconds          *big.Int
	Changed                            bool
	Initialized                        bool
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "settings")

	outstruct := new(struct {
		MaxVotePowerNatThresholdFraction   *big.Int
		MaxVotePowerAssetThresholdFraction *big.Int
		LowAssetUSDThreshold               *big.Int
		HighAssetUSDThreshold              *big.Int
		HighAssetTurnoutThresholdBIPS      *big.Int
		LowNatTurnoutThresholdBIPS         *big.Int
		RewardExpiryOffsetSeconds          *big.Int
		Changed                            bool
		Initialized                        bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.MaxVotePowerNatThresholdFraction = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.MaxVotePowerAssetThresholdFraction = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.LowAssetUSDThreshold = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.HighAssetUSDThreshold = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.HighAssetTurnoutThresholdBIPS = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.LowNatTurnoutThresholdBIPS = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.RewardExpiryOffsetSeconds = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Changed = *abi.ConvertType(out[7], new(bool)).(*bool)
	outstruct.Initialized = *abi.ConvertType(out[8], new(bool)).(*bool)

	return *outstruct, err

}

// Settings is a free data retrieval call binding the contract method 0xe06174e4.
//
// Solidity: function settings() view returns(uint256 maxVotePowerNatThresholdFraction, uint256 maxVotePowerAssetThresholdFraction, uint256 lowAssetUSDThreshold, uint256 highAssetUSDThreshold, uint256 highAssetTurnoutThresholdBIPS, uint256 lowNatTurnoutThresholdBIPS, uint256 rewardExpiryOffsetSeconds, bool changed, bool initialized)
func (_FM *FMSession) Settings() (struct {
	MaxVotePowerNatThresholdFraction   *big.Int
	MaxVotePowerAssetThresholdFraction *big.Int
	LowAssetUSDThreshold               *big.Int
	HighAssetUSDThreshold              *big.Int
	HighAssetTurnoutThresholdBIPS      *big.Int
	LowNatTurnoutThresholdBIPS         *big.Int
	RewardExpiryOffsetSeconds          *big.Int
	Changed                            bool
	Initialized                        bool
}, error) {
	return _FM.Contract.Settings(&_FM.CallOpts)
}

// Settings is a free data retrieval call binding the contract method 0xe06174e4.
//
// Solidity: function settings() view returns(uint256 maxVotePowerNatThresholdFraction, uint256 maxVotePowerAssetThresholdFraction, uint256 lowAssetUSDThreshold, uint256 highAssetUSDThreshold, uint256 highAssetTurnoutThresholdBIPS, uint256 lowNatTurnoutThresholdBIPS, uint256 rewardExpiryOffsetSeconds, bool changed, bool initialized)
func (_FM *FMCallerSession) Settings() (struct {
	MaxVotePowerNatThresholdFraction   *big.Int
	MaxVotePowerAssetThresholdFraction *big.Int
	LowAssetUSDThreshold               *big.Int
	HighAssetUSDThreshold              *big.Int
	HighAssetTurnoutThresholdBIPS      *big.Int
	LowNatTurnoutThresholdBIPS         *big.Int
	RewardExpiryOffsetSeconds          *big.Int
	Changed                            bool
	Initialized                        bool
}, error) {
	return _FM.Contract.Settings(&_FM.CallOpts)
}

// ShowLastRevertedError is a free data retrieval call binding the contract method 0x2b3c41a4.
//
// Solidity: function showLastRevertedError() view returns(uint256[] _lastErrorBlock, uint256[] _numErrors, string[] _errorString, address[] _erroringContract, uint256 _totalRevertedErrors)
func (_FM *FMCaller) ShowLastRevertedError(opts *bind.CallOpts) (struct {
	LastErrorBlock      []*big.Int
	NumErrors           []*big.Int
	ErrorString         []string
	ErroringContract    []common.Address
	TotalRevertedErrors *big.Int
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "showLastRevertedError")

	outstruct := new(struct {
		LastErrorBlock      []*big.Int
		NumErrors           []*big.Int
		ErrorString         []string
		ErroringContract    []common.Address
		TotalRevertedErrors *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LastErrorBlock = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.NumErrors = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.ErrorString = *abi.ConvertType(out[2], new([]string)).(*[]string)
	outstruct.ErroringContract = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)
	outstruct.TotalRevertedErrors = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ShowLastRevertedError is a free data retrieval call binding the contract method 0x2b3c41a4.
//
// Solidity: function showLastRevertedError() view returns(uint256[] _lastErrorBlock, uint256[] _numErrors, string[] _errorString, address[] _erroringContract, uint256 _totalRevertedErrors)
func (_FM *FMSession) ShowLastRevertedError() (struct {
	LastErrorBlock      []*big.Int
	NumErrors           []*big.Int
	ErrorString         []string
	ErroringContract    []common.Address
	TotalRevertedErrors *big.Int
}, error) {
	return _FM.Contract.ShowLastRevertedError(&_FM.CallOpts)
}

// ShowLastRevertedError is a free data retrieval call binding the contract method 0x2b3c41a4.
//
// Solidity: function showLastRevertedError() view returns(uint256[] _lastErrorBlock, uint256[] _numErrors, string[] _errorString, address[] _erroringContract, uint256 _totalRevertedErrors)
func (_FM *FMCallerSession) ShowLastRevertedError() (struct {
	LastErrorBlock      []*big.Int
	NumErrors           []*big.Int
	ErrorString         []string
	ErroringContract    []common.Address
	TotalRevertedErrors *big.Int
}, error) {
	return _FM.Contract.ShowLastRevertedError(&_FM.CallOpts)
}

// ShowRevertedErrors is a free data retrieval call binding the contract method 0x6ea0aa31.
//
// Solidity: function showRevertedErrors(uint256 startIndex, uint256 numErrorTypesToShow) view returns(uint256[] _lastErrorBlock, uint256[] _numErrors, string[] _errorString, address[] _erroringContract, uint256 _totalRevertedErrors)
func (_FM *FMCaller) ShowRevertedErrors(opts *bind.CallOpts, startIndex *big.Int, numErrorTypesToShow *big.Int) (struct {
	LastErrorBlock      []*big.Int
	NumErrors           []*big.Int
	ErrorString         []string
	ErroringContract    []common.Address
	TotalRevertedErrors *big.Int
}, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "showRevertedErrors", startIndex, numErrorTypesToShow)

	outstruct := new(struct {
		LastErrorBlock      []*big.Int
		NumErrors           []*big.Int
		ErrorString         []string
		ErroringContract    []common.Address
		TotalRevertedErrors *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LastErrorBlock = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.NumErrors = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.ErrorString = *abi.ConvertType(out[2], new([]string)).(*[]string)
	outstruct.ErroringContract = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)
	outstruct.TotalRevertedErrors = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ShowRevertedErrors is a free data retrieval call binding the contract method 0x6ea0aa31.
//
// Solidity: function showRevertedErrors(uint256 startIndex, uint256 numErrorTypesToShow) view returns(uint256[] _lastErrorBlock, uint256[] _numErrors, string[] _errorString, address[] _erroringContract, uint256 _totalRevertedErrors)
func (_FM *FMSession) ShowRevertedErrors(startIndex *big.Int, numErrorTypesToShow *big.Int) (struct {
	LastErrorBlock      []*big.Int
	NumErrors           []*big.Int
	ErrorString         []string
	ErroringContract    []common.Address
	TotalRevertedErrors *big.Int
}, error) {
	return _FM.Contract.ShowRevertedErrors(&_FM.CallOpts, startIndex, numErrorTypesToShow)
}

// ShowRevertedErrors is a free data retrieval call binding the contract method 0x6ea0aa31.
//
// Solidity: function showRevertedErrors(uint256 startIndex, uint256 numErrorTypesToShow) view returns(uint256[] _lastErrorBlock, uint256[] _numErrors, string[] _errorString, address[] _erroringContract, uint256 _totalRevertedErrors)
func (_FM *FMCallerSession) ShowRevertedErrors(startIndex *big.Int, numErrorTypesToShow *big.Int) (struct {
	LastErrorBlock      []*big.Int
	NumErrors           []*big.Int
	ErrorString         []string
	ErroringContract    []common.Address
	TotalRevertedErrors *big.Int
}, error) {
	return _FM.Contract.ShowRevertedErrors(&_FM.CallOpts, startIndex, numErrorTypesToShow)
}

// Supply is a free data retrieval call binding the contract method 0x047fc9aa.
//
// Solidity: function supply() view returns(address)
func (_FM *FMCaller) Supply(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "supply")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Supply is a free data retrieval call binding the contract method 0x047fc9aa.
//
// Solidity: function supply() view returns(address)
func (_FM *FMSession) Supply() (common.Address, error) {
	return _FM.Contract.Supply(&_FM.CallOpts)
}

// Supply is a free data retrieval call binding the contract method 0x047fc9aa.
//
// Solidity: function supply() view returns(address)
func (_FM *FMCallerSession) Supply() (common.Address, error) {
	return _FM.Contract.Supply(&_FM.CallOpts)
}

// VoterWhitelister is a free data retrieval call binding the contract method 0xc2b0d47b.
//
// Solidity: function voterWhitelister() view returns(address)
func (_FM *FMCaller) VoterWhitelister(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FM.contract.Call(opts, &out, "voterWhitelister")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterWhitelister is a free data retrieval call binding the contract method 0xc2b0d47b.
//
// Solidity: function voterWhitelister() view returns(address)
func (_FM *FMSession) VoterWhitelister() (common.Address, error) {
	return _FM.Contract.VoterWhitelister(&_FM.CallOpts)
}

// VoterWhitelister is a free data retrieval call binding the contract method 0xc2b0d47b.
//
// Solidity: function voterWhitelister() view returns(address)
func (_FM *FMCallerSession) VoterWhitelister() (common.Address, error) {
	return _FM.Contract.VoterWhitelister(&_FM.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_FM *FMTransactor) Activate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "activate")
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_FM *FMSession) Activate() (*types.Transaction, error) {
	return _FM.Contract.Activate(&_FM.TransactOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_FM *FMTransactorSession) Activate() (*types.Transaction, error) {
	return _FM.Contract.Activate(&_FM.TransactOpts)
}

// AddFtso is a paid mutator transaction binding the contract method 0x2663f1b4.
//
// Solidity: function addFtso(address _ftso) returns()
func (_FM *FMTransactor) AddFtso(opts *bind.TransactOpts, _ftso common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "addFtso", _ftso)
}

// AddFtso is a paid mutator transaction binding the contract method 0x2663f1b4.
//
// Solidity: function addFtso(address _ftso) returns()
func (_FM *FMSession) AddFtso(_ftso common.Address) (*types.Transaction, error) {
	return _FM.Contract.AddFtso(&_FM.TransactOpts, _ftso)
}

// AddFtso is a paid mutator transaction binding the contract method 0x2663f1b4.
//
// Solidity: function addFtso(address _ftso) returns()
func (_FM *FMTransactorSession) AddFtso(_ftso common.Address) (*types.Transaction, error) {
	return _FM.Contract.AddFtso(&_FM.TransactOpts, _ftso)
}

// AddRevertError is a paid mutator transaction binding the contract method 0xc0ffe908.
//
// Solidity: function addRevertError(address revertedContract, string message) returns()
func (_FM *FMTransactor) AddRevertError(opts *bind.TransactOpts, revertedContract common.Address, message string) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "addRevertError", revertedContract, message)
}

// AddRevertError is a paid mutator transaction binding the contract method 0xc0ffe908.
//
// Solidity: function addRevertError(address revertedContract, string message) returns()
func (_FM *FMSession) AddRevertError(revertedContract common.Address, message string) (*types.Transaction, error) {
	return _FM.Contract.AddRevertError(&_FM.TransactOpts, revertedContract, message)
}

// AddRevertError is a paid mutator transaction binding the contract method 0xc0ffe908.
//
// Solidity: function addRevertError(address revertedContract, string message) returns()
func (_FM *FMTransactorSession) AddRevertError(revertedContract common.Address, message string) (*types.Transaction, error) {
	return _FM.Contract.AddRevertError(&_FM.TransactOpts, revertedContract, message)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_FM *FMTransactor) ClaimGovernance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "claimGovernance")
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_FM *FMSession) ClaimGovernance() (*types.Transaction, error) {
	return _FM.Contract.ClaimGovernance(&_FM.TransactOpts)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_FM *FMTransactorSession) ClaimGovernance() (*types.Transaction, error) {
	return _FM.Contract.ClaimGovernance(&_FM.TransactOpts)
}

// Daemonize is a paid mutator transaction binding the contract method 0x6d0e8c34.
//
// Solidity: function daemonize() returns(bool)
func (_FM *FMTransactor) Daemonize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "daemonize")
}

// Daemonize is a paid mutator transaction binding the contract method 0x6d0e8c34.
//
// Solidity: function daemonize() returns(bool)
func (_FM *FMSession) Daemonize() (*types.Transaction, error) {
	return _FM.Contract.Daemonize(&_FM.TransactOpts)
}

// Daemonize is a paid mutator transaction binding the contract method 0x6d0e8c34.
//
// Solidity: function daemonize() returns(bool)
func (_FM *FMTransactorSession) Daemonize() (*types.Transaction, error) {
	return _FM.Contract.Daemonize(&_FM.TransactOpts)
}

// Initialise is a paid mutator transaction binding the contract method 0x9d6a890f.
//
// Solidity: function initialise(address _governance) returns()
func (_FM *FMTransactor) Initialise(opts *bind.TransactOpts, _governance common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "initialise", _governance)
}

// Initialise is a paid mutator transaction binding the contract method 0x9d6a890f.
//
// Solidity: function initialise(address _governance) returns()
func (_FM *FMSession) Initialise(_governance common.Address) (*types.Transaction, error) {
	return _FM.Contract.Initialise(&_FM.TransactOpts, _governance)
}

// Initialise is a paid mutator transaction binding the contract method 0x9d6a890f.
//
// Solidity: function initialise(address _governance) returns()
func (_FM *FMTransactorSession) Initialise(_governance common.Address) (*types.Transaction, error) {
	return _FM.Contract.Initialise(&_FM.TransactOpts, _governance)
}

// ProposeGovernance is a paid mutator transaction binding the contract method 0xc373a08e.
//
// Solidity: function proposeGovernance(address _governance) returns()
func (_FM *FMTransactor) ProposeGovernance(opts *bind.TransactOpts, _governance common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "proposeGovernance", _governance)
}

// ProposeGovernance is a paid mutator transaction binding the contract method 0xc373a08e.
//
// Solidity: function proposeGovernance(address _governance) returns()
func (_FM *FMSession) ProposeGovernance(_governance common.Address) (*types.Transaction, error) {
	return _FM.Contract.ProposeGovernance(&_FM.TransactOpts, _governance)
}

// ProposeGovernance is a paid mutator transaction binding the contract method 0xc373a08e.
//
// Solidity: function proposeGovernance(address _governance) returns()
func (_FM *FMTransactorSession) ProposeGovernance(_governance common.Address) (*types.Transaction, error) {
	return _FM.Contract.ProposeGovernance(&_FM.TransactOpts, _governance)
}

// RemoveFtso is a paid mutator transaction binding the contract method 0xa670ff87.
//
// Solidity: function removeFtso(address _ftso) returns()
func (_FM *FMTransactor) RemoveFtso(opts *bind.TransactOpts, _ftso common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "removeFtso", _ftso)
}

// RemoveFtso is a paid mutator transaction binding the contract method 0xa670ff87.
//
// Solidity: function removeFtso(address _ftso) returns()
func (_FM *FMSession) RemoveFtso(_ftso common.Address) (*types.Transaction, error) {
	return _FM.Contract.RemoveFtso(&_FM.TransactOpts, _ftso)
}

// RemoveFtso is a paid mutator transaction binding the contract method 0xa670ff87.
//
// Solidity: function removeFtso(address _ftso) returns()
func (_FM *FMTransactorSession) RemoveFtso(_ftso common.Address) (*types.Transaction, error) {
	return _FM.Contract.RemoveFtso(&_FM.TransactOpts, _ftso)
}

// ReplaceFtso is a paid mutator transaction binding the contract method 0xe7a0d01e.
//
// Solidity: function replaceFtso(address _ftsoToRemove, address _ftsoToAdd, bool _copyCurrentPrice, bool _copyAssetOrAssetFtsos) returns()
func (_FM *FMTransactor) ReplaceFtso(opts *bind.TransactOpts, _ftsoToRemove common.Address, _ftsoToAdd common.Address, _copyCurrentPrice bool, _copyAssetOrAssetFtsos bool) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "replaceFtso", _ftsoToRemove, _ftsoToAdd, _copyCurrentPrice, _copyAssetOrAssetFtsos)
}

// ReplaceFtso is a paid mutator transaction binding the contract method 0xe7a0d01e.
//
// Solidity: function replaceFtso(address _ftsoToRemove, address _ftsoToAdd, bool _copyCurrentPrice, bool _copyAssetOrAssetFtsos) returns()
func (_FM *FMSession) ReplaceFtso(_ftsoToRemove common.Address, _ftsoToAdd common.Address, _copyCurrentPrice bool, _copyAssetOrAssetFtsos bool) (*types.Transaction, error) {
	return _FM.Contract.ReplaceFtso(&_FM.TransactOpts, _ftsoToRemove, _ftsoToAdd, _copyCurrentPrice, _copyAssetOrAssetFtsos)
}

// ReplaceFtso is a paid mutator transaction binding the contract method 0xe7a0d01e.
//
// Solidity: function replaceFtso(address _ftsoToRemove, address _ftsoToAdd, bool _copyCurrentPrice, bool _copyAssetOrAssetFtsos) returns()
func (_FM *FMTransactorSession) ReplaceFtso(_ftsoToRemove common.Address, _ftsoToAdd common.Address, _copyCurrentPrice bool, _copyAssetOrAssetFtsos bool) (*types.Transaction, error) {
	return _FM.Contract.ReplaceFtso(&_FM.TransactOpts, _ftsoToRemove, _ftsoToAdd, _copyCurrentPrice, _copyAssetOrAssetFtsos)
}

// SetContractAddresses is a paid mutator transaction binding the contract method 0xe847ae1e.
//
// Solidity: function setContractAddresses(address _rewardManager, address _ftsoRegistry, address _voterWhitelister, address _supply, address _cleanupBlockNumberManager) returns()
func (_FM *FMTransactor) SetContractAddresses(opts *bind.TransactOpts, _rewardManager common.Address, _ftsoRegistry common.Address, _voterWhitelister common.Address, _supply common.Address, _cleanupBlockNumberManager common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "setContractAddresses", _rewardManager, _ftsoRegistry, _voterWhitelister, _supply, _cleanupBlockNumberManager)
}

// SetContractAddresses is a paid mutator transaction binding the contract method 0xe847ae1e.
//
// Solidity: function setContractAddresses(address _rewardManager, address _ftsoRegistry, address _voterWhitelister, address _supply, address _cleanupBlockNumberManager) returns()
func (_FM *FMSession) SetContractAddresses(_rewardManager common.Address, _ftsoRegistry common.Address, _voterWhitelister common.Address, _supply common.Address, _cleanupBlockNumberManager common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetContractAddresses(&_FM.TransactOpts, _rewardManager, _ftsoRegistry, _voterWhitelister, _supply, _cleanupBlockNumberManager)
}

// SetContractAddresses is a paid mutator transaction binding the contract method 0xe847ae1e.
//
// Solidity: function setContractAddresses(address _rewardManager, address _ftsoRegistry, address _voterWhitelister, address _supply, address _cleanupBlockNumberManager) returns()
func (_FM *FMTransactorSession) SetContractAddresses(_rewardManager common.Address, _ftsoRegistry common.Address, _voterWhitelister common.Address, _supply common.Address, _cleanupBlockNumberManager common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetContractAddresses(&_FM.TransactOpts, _rewardManager, _ftsoRegistry, _voterWhitelister, _supply, _cleanupBlockNumberManager)
}

// SetFallbackMode is a paid mutator transaction binding the contract method 0xff882fbb.
//
// Solidity: function setFallbackMode(bool _fallbackMode) returns()
func (_FM *FMTransactor) SetFallbackMode(opts *bind.TransactOpts, _fallbackMode bool) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "setFallbackMode", _fallbackMode)
}

// SetFallbackMode is a paid mutator transaction binding the contract method 0xff882fbb.
//
// Solidity: function setFallbackMode(bool _fallbackMode) returns()
func (_FM *FMSession) SetFallbackMode(_fallbackMode bool) (*types.Transaction, error) {
	return _FM.Contract.SetFallbackMode(&_FM.TransactOpts, _fallbackMode)
}

// SetFallbackMode is a paid mutator transaction binding the contract method 0xff882fbb.
//
// Solidity: function setFallbackMode(bool _fallbackMode) returns()
func (_FM *FMTransactorSession) SetFallbackMode(_fallbackMode bool) (*types.Transaction, error) {
	return _FM.Contract.SetFallbackMode(&_FM.TransactOpts, _fallbackMode)
}

// SetFtsoAsset is a paid mutator transaction binding the contract method 0x6b65cc34.
//
// Solidity: function setFtsoAsset(address _ftso, address _asset) returns()
func (_FM *FMTransactor) SetFtsoAsset(opts *bind.TransactOpts, _ftso common.Address, _asset common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "setFtsoAsset", _ftso, _asset)
}

// SetFtsoAsset is a paid mutator transaction binding the contract method 0x6b65cc34.
//
// Solidity: function setFtsoAsset(address _ftso, address _asset) returns()
func (_FM *FMSession) SetFtsoAsset(_ftso common.Address, _asset common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetFtsoAsset(&_FM.TransactOpts, _ftso, _asset)
}

// SetFtsoAsset is a paid mutator transaction binding the contract method 0x6b65cc34.
//
// Solidity: function setFtsoAsset(address _ftso, address _asset) returns()
func (_FM *FMTransactorSession) SetFtsoAsset(_ftso common.Address, _asset common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetFtsoAsset(&_FM.TransactOpts, _ftso, _asset)
}

// SetFtsoAssetFtsos is a paid mutator transaction binding the contract method 0xa93a6f42.
//
// Solidity: function setFtsoAssetFtsos(address _ftso, address[] _assetFtsos) returns()
func (_FM *FMTransactor) SetFtsoAssetFtsos(opts *bind.TransactOpts, _ftso common.Address, _assetFtsos []common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "setFtsoAssetFtsos", _ftso, _assetFtsos)
}

// SetFtsoAssetFtsos is a paid mutator transaction binding the contract method 0xa93a6f42.
//
// Solidity: function setFtsoAssetFtsos(address _ftso, address[] _assetFtsos) returns()
func (_FM *FMSession) SetFtsoAssetFtsos(_ftso common.Address, _assetFtsos []common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetFtsoAssetFtsos(&_FM.TransactOpts, _ftso, _assetFtsos)
}

// SetFtsoAssetFtsos is a paid mutator transaction binding the contract method 0xa93a6f42.
//
// Solidity: function setFtsoAssetFtsos(address _ftso, address[] _assetFtsos) returns()
func (_FM *FMTransactorSession) SetFtsoAssetFtsos(_ftso common.Address, _assetFtsos []common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetFtsoAssetFtsos(&_FM.TransactOpts, _ftso, _assetFtsos)
}

// SetFtsoFallbackMode is a paid mutator transaction binding the contract method 0xaf946af7.
//
// Solidity: function setFtsoFallbackMode(address _ftso, bool _fallbackMode) returns()
func (_FM *FMTransactor) SetFtsoFallbackMode(opts *bind.TransactOpts, _ftso common.Address, _fallbackMode bool) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "setFtsoFallbackMode", _ftso, _fallbackMode)
}

// SetFtsoFallbackMode is a paid mutator transaction binding the contract method 0xaf946af7.
//
// Solidity: function setFtsoFallbackMode(address _ftso, bool _fallbackMode) returns()
func (_FM *FMSession) SetFtsoFallbackMode(_ftso common.Address, _fallbackMode bool) (*types.Transaction, error) {
	return _FM.Contract.SetFtsoFallbackMode(&_FM.TransactOpts, _ftso, _fallbackMode)
}

// SetFtsoFallbackMode is a paid mutator transaction binding the contract method 0xaf946af7.
//
// Solidity: function setFtsoFallbackMode(address _ftso, bool _fallbackMode) returns()
func (_FM *FMTransactorSession) SetFtsoFallbackMode(_ftso common.Address, _fallbackMode bool) (*types.Transaction, error) {
	return _FM.Contract.SetFtsoFallbackMode(&_FM.TransactOpts, _ftso, _fallbackMode)
}

// SetGovernanceParameters is a paid mutator transaction binding the contract method 0x9131205b.
//
// Solidity: function setGovernanceParameters(uint256 _maxVotePowerNatThresholdFraction, uint256 _maxVotePowerAssetThresholdFraction, uint256 _lowAssetUSDThreshold, uint256 _highAssetUSDThreshold, uint256 _highAssetTurnoutThresholdBIPS, uint256 _lowNatTurnoutThresholdBIPS, uint256 _rewardExpiryOffsetSeconds, address[] _trustedAddresses) returns()
func (_FM *FMTransactor) SetGovernanceParameters(opts *bind.TransactOpts, _maxVotePowerNatThresholdFraction *big.Int, _maxVotePowerAssetThresholdFraction *big.Int, _lowAssetUSDThreshold *big.Int, _highAssetUSDThreshold *big.Int, _highAssetTurnoutThresholdBIPS *big.Int, _lowNatTurnoutThresholdBIPS *big.Int, _rewardExpiryOffsetSeconds *big.Int, _trustedAddresses []common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "setGovernanceParameters", _maxVotePowerNatThresholdFraction, _maxVotePowerAssetThresholdFraction, _lowAssetUSDThreshold, _highAssetUSDThreshold, _highAssetTurnoutThresholdBIPS, _lowNatTurnoutThresholdBIPS, _rewardExpiryOffsetSeconds, _trustedAddresses)
}

// SetGovernanceParameters is a paid mutator transaction binding the contract method 0x9131205b.
//
// Solidity: function setGovernanceParameters(uint256 _maxVotePowerNatThresholdFraction, uint256 _maxVotePowerAssetThresholdFraction, uint256 _lowAssetUSDThreshold, uint256 _highAssetUSDThreshold, uint256 _highAssetTurnoutThresholdBIPS, uint256 _lowNatTurnoutThresholdBIPS, uint256 _rewardExpiryOffsetSeconds, address[] _trustedAddresses) returns()
func (_FM *FMSession) SetGovernanceParameters(_maxVotePowerNatThresholdFraction *big.Int, _maxVotePowerAssetThresholdFraction *big.Int, _lowAssetUSDThreshold *big.Int, _highAssetUSDThreshold *big.Int, _highAssetTurnoutThresholdBIPS *big.Int, _lowNatTurnoutThresholdBIPS *big.Int, _rewardExpiryOffsetSeconds *big.Int, _trustedAddresses []common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetGovernanceParameters(&_FM.TransactOpts, _maxVotePowerNatThresholdFraction, _maxVotePowerAssetThresholdFraction, _lowAssetUSDThreshold, _highAssetUSDThreshold, _highAssetTurnoutThresholdBIPS, _lowNatTurnoutThresholdBIPS, _rewardExpiryOffsetSeconds, _trustedAddresses)
}

// SetGovernanceParameters is a paid mutator transaction binding the contract method 0x9131205b.
//
// Solidity: function setGovernanceParameters(uint256 _maxVotePowerNatThresholdFraction, uint256 _maxVotePowerAssetThresholdFraction, uint256 _lowAssetUSDThreshold, uint256 _highAssetUSDThreshold, uint256 _highAssetTurnoutThresholdBIPS, uint256 _lowNatTurnoutThresholdBIPS, uint256 _rewardExpiryOffsetSeconds, address[] _trustedAddresses) returns()
func (_FM *FMTransactorSession) SetGovernanceParameters(_maxVotePowerNatThresholdFraction *big.Int, _maxVotePowerAssetThresholdFraction *big.Int, _lowAssetUSDThreshold *big.Int, _highAssetUSDThreshold *big.Int, _highAssetTurnoutThresholdBIPS *big.Int, _lowNatTurnoutThresholdBIPS *big.Int, _rewardExpiryOffsetSeconds *big.Int, _trustedAddresses []common.Address) (*types.Transaction, error) {
	return _FM.Contract.SetGovernanceParameters(&_FM.TransactOpts, _maxVotePowerNatThresholdFraction, _maxVotePowerAssetThresholdFraction, _lowAssetUSDThreshold, _highAssetUSDThreshold, _highAssetTurnoutThresholdBIPS, _lowNatTurnoutThresholdBIPS, _rewardExpiryOffsetSeconds, _trustedAddresses)
}

// SwitchToFallbackMode is a paid mutator transaction binding the contract method 0xe22fdece.
//
// Solidity: function switchToFallbackMode() returns(bool)
func (_FM *FMTransactor) SwitchToFallbackMode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "switchToFallbackMode")
}

// SwitchToFallbackMode is a paid mutator transaction binding the contract method 0xe22fdece.
//
// Solidity: function switchToFallbackMode() returns(bool)
func (_FM *FMSession) SwitchToFallbackMode() (*types.Transaction, error) {
	return _FM.Contract.SwitchToFallbackMode(&_FM.TransactOpts)
}

// SwitchToFallbackMode is a paid mutator transaction binding the contract method 0xe22fdece.
//
// Solidity: function switchToFallbackMode() returns(bool)
func (_FM *FMTransactorSession) SwitchToFallbackMode() (*types.Transaction, error) {
	return _FM.Contract.SwitchToFallbackMode(&_FM.TransactOpts)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _governance) returns()
func (_FM *FMTransactor) TransferGovernance(opts *bind.TransactOpts, _governance common.Address) (*types.Transaction, error) {
	return _FM.contract.Transact(opts, "transferGovernance", _governance)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _governance) returns()
func (_FM *FMSession) TransferGovernance(_governance common.Address) (*types.Transaction, error) {
	return _FM.Contract.TransferGovernance(&_FM.TransactOpts, _governance)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _governance) returns()
func (_FM *FMTransactorSession) TransferGovernance(_governance common.Address) (*types.Transaction, error) {
	return _FM.Contract.TransferGovernance(&_FM.TransactOpts, _governance)
}

// FMCleanupBlockNumberManagerFailedForBlockIterator is returned from FilterCleanupBlockNumberManagerFailedForBlock and is used to iterate over the raw logs and unpacked data for CleanupBlockNumberManagerFailedForBlock events raised by the FM contract.
type FMCleanupBlockNumberManagerFailedForBlockIterator struct {
	Event *FMCleanupBlockNumberManagerFailedForBlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMCleanupBlockNumberManagerFailedForBlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMCleanupBlockNumberManagerFailedForBlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMCleanupBlockNumberManagerFailedForBlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMCleanupBlockNumberManagerFailedForBlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMCleanupBlockNumberManagerFailedForBlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMCleanupBlockNumberManagerFailedForBlock represents a CleanupBlockNumberManagerFailedForBlock event raised by the FM contract.
type FMCleanupBlockNumberManagerFailedForBlock struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCleanupBlockNumberManagerFailedForBlock is a free log retrieval operation binding the contract event 0x9f874ea08c7014cce74622bfe71434f81aba7598ad65126a6aea86945bdfa18d.
//
// Solidity: event CleanupBlockNumberManagerFailedForBlock(uint256 blockNumber)
func (_FM *FMFilterer) FilterCleanupBlockNumberManagerFailedForBlock(opts *bind.FilterOpts) (*FMCleanupBlockNumberManagerFailedForBlockIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "CleanupBlockNumberManagerFailedForBlock")
	if err != nil {
		return nil, err
	}
	return &FMCleanupBlockNumberManagerFailedForBlockIterator{contract: _FM.contract, event: "CleanupBlockNumberManagerFailedForBlock", logs: logs, sub: sub}, nil
}

// WatchCleanupBlockNumberManagerFailedForBlock is a free log subscription operation binding the contract event 0x9f874ea08c7014cce74622bfe71434f81aba7598ad65126a6aea86945bdfa18d.
//
// Solidity: event CleanupBlockNumberManagerFailedForBlock(uint256 blockNumber)
func (_FM *FMFilterer) WatchCleanupBlockNumberManagerFailedForBlock(opts *bind.WatchOpts, sink chan<- *FMCleanupBlockNumberManagerFailedForBlock) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "CleanupBlockNumberManagerFailedForBlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMCleanupBlockNumberManagerFailedForBlock)
				if err := _FM.contract.UnpackLog(event, "CleanupBlockNumberManagerFailedForBlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCleanupBlockNumberManagerFailedForBlock is a log parse operation binding the contract event 0x9f874ea08c7014cce74622bfe71434f81aba7598ad65126a6aea86945bdfa18d.
//
// Solidity: event CleanupBlockNumberManagerFailedForBlock(uint256 blockNumber)
func (_FM *FMFilterer) ParseCleanupBlockNumberManagerFailedForBlock(log types.Log) (*FMCleanupBlockNumberManagerFailedForBlock, error) {
	event := new(FMCleanupBlockNumberManagerFailedForBlock)
	if err := _FM.contract.UnpackLog(event, "CleanupBlockNumberManagerFailedForBlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMCleanupBlockNumberManagerUnsetIterator is returned from FilterCleanupBlockNumberManagerUnset and is used to iterate over the raw logs and unpacked data for CleanupBlockNumberManagerUnset events raised by the FM contract.
type FMCleanupBlockNumberManagerUnsetIterator struct {
	Event *FMCleanupBlockNumberManagerUnset // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMCleanupBlockNumberManagerUnsetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMCleanupBlockNumberManagerUnset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMCleanupBlockNumberManagerUnset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMCleanupBlockNumberManagerUnsetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMCleanupBlockNumberManagerUnsetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMCleanupBlockNumberManagerUnset represents a CleanupBlockNumberManagerUnset event raised by the FM contract.
type FMCleanupBlockNumberManagerUnset struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCleanupBlockNumberManagerUnset is a free log retrieval operation binding the contract event 0x9a880a9e2a01928f1a99d7b0e2ea1147f52e2eb381f8d9345c110932d57bce8d.
//
// Solidity: event CleanupBlockNumberManagerUnset()
func (_FM *FMFilterer) FilterCleanupBlockNumberManagerUnset(opts *bind.FilterOpts) (*FMCleanupBlockNumberManagerUnsetIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "CleanupBlockNumberManagerUnset")
	if err != nil {
		return nil, err
	}
	return &FMCleanupBlockNumberManagerUnsetIterator{contract: _FM.contract, event: "CleanupBlockNumberManagerUnset", logs: logs, sub: sub}, nil
}

// WatchCleanupBlockNumberManagerUnset is a free log subscription operation binding the contract event 0x9a880a9e2a01928f1a99d7b0e2ea1147f52e2eb381f8d9345c110932d57bce8d.
//
// Solidity: event CleanupBlockNumberManagerUnset()
func (_FM *FMFilterer) WatchCleanupBlockNumberManagerUnset(opts *bind.WatchOpts, sink chan<- *FMCleanupBlockNumberManagerUnset) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "CleanupBlockNumberManagerUnset")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMCleanupBlockNumberManagerUnset)
				if err := _FM.contract.UnpackLog(event, "CleanupBlockNumberManagerUnset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCleanupBlockNumberManagerUnset is a log parse operation binding the contract event 0x9a880a9e2a01928f1a99d7b0e2ea1147f52e2eb381f8d9345c110932d57bce8d.
//
// Solidity: event CleanupBlockNumberManagerUnset()
func (_FM *FMFilterer) ParseCleanupBlockNumberManagerUnset(log types.Log) (*FMCleanupBlockNumberManagerUnset, error) {
	event := new(FMCleanupBlockNumberManagerUnset)
	if err := _FM.contract.UnpackLog(event, "CleanupBlockNumberManagerUnset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMClosingExpiredRewardEpochFailedIterator is returned from FilterClosingExpiredRewardEpochFailed and is used to iterate over the raw logs and unpacked data for ClosingExpiredRewardEpochFailed events raised by the FM contract.
type FMClosingExpiredRewardEpochFailedIterator struct {
	Event *FMClosingExpiredRewardEpochFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMClosingExpiredRewardEpochFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMClosingExpiredRewardEpochFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMClosingExpiredRewardEpochFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMClosingExpiredRewardEpochFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMClosingExpiredRewardEpochFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMClosingExpiredRewardEpochFailed represents a ClosingExpiredRewardEpochFailed event raised by the FM contract.
type FMClosingExpiredRewardEpochFailed struct {
	RewardEpoch *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterClosingExpiredRewardEpochFailed is a free log retrieval operation binding the contract event 0xa819a21065ad87bdde9e6d398d3213e0d3634afd87aceb7092236483f5d7ca8d.
//
// Solidity: event ClosingExpiredRewardEpochFailed(uint256 _rewardEpoch)
func (_FM *FMFilterer) FilterClosingExpiredRewardEpochFailed(opts *bind.FilterOpts) (*FMClosingExpiredRewardEpochFailedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "ClosingExpiredRewardEpochFailed")
	if err != nil {
		return nil, err
	}
	return &FMClosingExpiredRewardEpochFailedIterator{contract: _FM.contract, event: "ClosingExpiredRewardEpochFailed", logs: logs, sub: sub}, nil
}

// WatchClosingExpiredRewardEpochFailed is a free log subscription operation binding the contract event 0xa819a21065ad87bdde9e6d398d3213e0d3634afd87aceb7092236483f5d7ca8d.
//
// Solidity: event ClosingExpiredRewardEpochFailed(uint256 _rewardEpoch)
func (_FM *FMFilterer) WatchClosingExpiredRewardEpochFailed(opts *bind.WatchOpts, sink chan<- *FMClosingExpiredRewardEpochFailed) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "ClosingExpiredRewardEpochFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMClosingExpiredRewardEpochFailed)
				if err := _FM.contract.UnpackLog(event, "ClosingExpiredRewardEpochFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClosingExpiredRewardEpochFailed is a log parse operation binding the contract event 0xa819a21065ad87bdde9e6d398d3213e0d3634afd87aceb7092236483f5d7ca8d.
//
// Solidity: event ClosingExpiredRewardEpochFailed(uint256 _rewardEpoch)
func (_FM *FMFilterer) ParseClosingExpiredRewardEpochFailed(log types.Log) (*FMClosingExpiredRewardEpochFailed, error) {
	event := new(FMClosingExpiredRewardEpochFailed)
	if err := _FM.contract.UnpackLog(event, "ClosingExpiredRewardEpochFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMContractRevertErrorIterator is returned from FilterContractRevertError and is used to iterate over the raw logs and unpacked data for ContractRevertError events raised by the FM contract.
type FMContractRevertErrorIterator struct {
	Event *FMContractRevertError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMContractRevertErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMContractRevertError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMContractRevertError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMContractRevertErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMContractRevertErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMContractRevertError represents a ContractRevertError event raised by the FM contract.
type FMContractRevertError struct {
	TheContract common.Address
	AtBlock     *big.Int
	TheMessage  string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContractRevertError is a free log retrieval operation binding the contract event 0x1a601cf5e0efbd558b2778b7389af04741d1c49bcab104c40daa2da194593617.
//
// Solidity: event ContractRevertError(address theContract, uint256 atBlock, string theMessage)
func (_FM *FMFilterer) FilterContractRevertError(opts *bind.FilterOpts) (*FMContractRevertErrorIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "ContractRevertError")
	if err != nil {
		return nil, err
	}
	return &FMContractRevertErrorIterator{contract: _FM.contract, event: "ContractRevertError", logs: logs, sub: sub}, nil
}

// WatchContractRevertError is a free log subscription operation binding the contract event 0x1a601cf5e0efbd558b2778b7389af04741d1c49bcab104c40daa2da194593617.
//
// Solidity: event ContractRevertError(address theContract, uint256 atBlock, string theMessage)
func (_FM *FMFilterer) WatchContractRevertError(opts *bind.WatchOpts, sink chan<- *FMContractRevertError) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "ContractRevertError")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMContractRevertError)
				if err := _FM.contract.UnpackLog(event, "ContractRevertError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractRevertError is a log parse operation binding the contract event 0x1a601cf5e0efbd558b2778b7389af04741d1c49bcab104c40daa2da194593617.
//
// Solidity: event ContractRevertError(address theContract, uint256 atBlock, string theMessage)
func (_FM *FMFilterer) ParseContractRevertError(log types.Log) (*FMContractRevertError, error) {
	event := new(FMContractRevertError)
	if err := _FM.contract.UnpackLog(event, "ContractRevertError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMDistributingRewardsFailedIterator is returned from FilterDistributingRewardsFailed and is used to iterate over the raw logs and unpacked data for DistributingRewardsFailed events raised by the FM contract.
type FMDistributingRewardsFailedIterator struct {
	Event *FMDistributingRewardsFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMDistributingRewardsFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMDistributingRewardsFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMDistributingRewardsFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMDistributingRewardsFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMDistributingRewardsFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMDistributingRewardsFailed represents a DistributingRewardsFailed event raised by the FM contract.
type FMDistributingRewardsFailed struct {
	Ftso    common.Address
	EpochId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDistributingRewardsFailed is a free log retrieval operation binding the contract event 0x175a1d13d190d6a1e14461c214b3ecf6118b828797750b7bffd7c4f2c1eba54c.
//
// Solidity: event DistributingRewardsFailed(address ftso, uint256 epochId)
func (_FM *FMFilterer) FilterDistributingRewardsFailed(opts *bind.FilterOpts) (*FMDistributingRewardsFailedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "DistributingRewardsFailed")
	if err != nil {
		return nil, err
	}
	return &FMDistributingRewardsFailedIterator{contract: _FM.contract, event: "DistributingRewardsFailed", logs: logs, sub: sub}, nil
}

// WatchDistributingRewardsFailed is a free log subscription operation binding the contract event 0x175a1d13d190d6a1e14461c214b3ecf6118b828797750b7bffd7c4f2c1eba54c.
//
// Solidity: event DistributingRewardsFailed(address ftso, uint256 epochId)
func (_FM *FMFilterer) WatchDistributingRewardsFailed(opts *bind.WatchOpts, sink chan<- *FMDistributingRewardsFailed) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "DistributingRewardsFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMDistributingRewardsFailed)
				if err := _FM.contract.UnpackLog(event, "DistributingRewardsFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDistributingRewardsFailed is a log parse operation binding the contract event 0x175a1d13d190d6a1e14461c214b3ecf6118b828797750b7bffd7c4f2c1eba54c.
//
// Solidity: event DistributingRewardsFailed(address ftso, uint256 epochId)
func (_FM *FMFilterer) ParseDistributingRewardsFailed(log types.Log) (*FMDistributingRewardsFailed, error) {
	event := new(FMDistributingRewardsFailed)
	if err := _FM.contract.UnpackLog(event, "DistributingRewardsFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMFallbackModeIterator is returned from FilterFallbackMode and is used to iterate over the raw logs and unpacked data for FallbackMode events raised by the FM contract.
type FMFallbackModeIterator struct {
	Event *FMFallbackMode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMFallbackModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMFallbackMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMFallbackMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMFallbackModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMFallbackModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMFallbackMode represents a FallbackMode event raised by the FM contract.
type FMFallbackMode struct {
	FallbackMode bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFallbackMode is a free log retrieval operation binding the contract event 0x217a37a37fc40a97159886f80c3d45986e6fc4330ce6ad7283478b5e5ab705bc.
//
// Solidity: event FallbackMode(bool fallbackMode)
func (_FM *FMFilterer) FilterFallbackMode(opts *bind.FilterOpts) (*FMFallbackModeIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "FallbackMode")
	if err != nil {
		return nil, err
	}
	return &FMFallbackModeIterator{contract: _FM.contract, event: "FallbackMode", logs: logs, sub: sub}, nil
}

// WatchFallbackMode is a free log subscription operation binding the contract event 0x217a37a37fc40a97159886f80c3d45986e6fc4330ce6ad7283478b5e5ab705bc.
//
// Solidity: event FallbackMode(bool fallbackMode)
func (_FM *FMFilterer) WatchFallbackMode(opts *bind.WatchOpts, sink chan<- *FMFallbackMode) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "FallbackMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMFallbackMode)
				if err := _FM.contract.UnpackLog(event, "FallbackMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFallbackMode is a log parse operation binding the contract event 0x217a37a37fc40a97159886f80c3d45986e6fc4330ce6ad7283478b5e5ab705bc.
//
// Solidity: event FallbackMode(bool fallbackMode)
func (_FM *FMFilterer) ParseFallbackMode(log types.Log) (*FMFallbackMode, error) {
	event := new(FMFallbackMode)
	if err := _FM.contract.UnpackLog(event, "FallbackMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMFinalizingPriceEpochFailedIterator is returned from FilterFinalizingPriceEpochFailed and is used to iterate over the raw logs and unpacked data for FinalizingPriceEpochFailed events raised by the FM contract.
type FMFinalizingPriceEpochFailedIterator struct {
	Event *FMFinalizingPriceEpochFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMFinalizingPriceEpochFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMFinalizingPriceEpochFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMFinalizingPriceEpochFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMFinalizingPriceEpochFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMFinalizingPriceEpochFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMFinalizingPriceEpochFailed represents a FinalizingPriceEpochFailed event raised by the FM contract.
type FMFinalizingPriceEpochFailed struct {
	Ftso        common.Address
	EpochId     *big.Int
	FailingType uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterFinalizingPriceEpochFailed is a free log retrieval operation binding the contract event 0x79f4c7cc43bfb79f5a3aad0d92f75b6fed7db061bb5cc2580a01c8132711b881.
//
// Solidity: event FinalizingPriceEpochFailed(address ftso, uint256 epochId, uint8 failingType)
func (_FM *FMFilterer) FilterFinalizingPriceEpochFailed(opts *bind.FilterOpts) (*FMFinalizingPriceEpochFailedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "FinalizingPriceEpochFailed")
	if err != nil {
		return nil, err
	}
	return &FMFinalizingPriceEpochFailedIterator{contract: _FM.contract, event: "FinalizingPriceEpochFailed", logs: logs, sub: sub}, nil
}

// WatchFinalizingPriceEpochFailed is a free log subscription operation binding the contract event 0x79f4c7cc43bfb79f5a3aad0d92f75b6fed7db061bb5cc2580a01c8132711b881.
//
// Solidity: event FinalizingPriceEpochFailed(address ftso, uint256 epochId, uint8 failingType)
func (_FM *FMFilterer) WatchFinalizingPriceEpochFailed(opts *bind.WatchOpts, sink chan<- *FMFinalizingPriceEpochFailed) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "FinalizingPriceEpochFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMFinalizingPriceEpochFailed)
				if err := _FM.contract.UnpackLog(event, "FinalizingPriceEpochFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinalizingPriceEpochFailed is a log parse operation binding the contract event 0x79f4c7cc43bfb79f5a3aad0d92f75b6fed7db061bb5cc2580a01c8132711b881.
//
// Solidity: event FinalizingPriceEpochFailed(address ftso, uint256 epochId, uint8 failingType)
func (_FM *FMFilterer) ParseFinalizingPriceEpochFailed(log types.Log) (*FMFinalizingPriceEpochFailed, error) {
	event := new(FMFinalizingPriceEpochFailed)
	if err := _FM.contract.UnpackLog(event, "FinalizingPriceEpochFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMFtsoAddedIterator is returned from FilterFtsoAdded and is used to iterate over the raw logs and unpacked data for FtsoAdded events raised by the FM contract.
type FMFtsoAddedIterator struct {
	Event *FMFtsoAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMFtsoAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMFtsoAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMFtsoAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMFtsoAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMFtsoAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMFtsoAdded represents a FtsoAdded event raised by the FM contract.
type FMFtsoAdded struct {
	Ftso common.Address
	Add  bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterFtsoAdded is a free log retrieval operation binding the contract event 0xa0985424f2efdcae4b57a7c84bbf0a0b19f93054f21e9eb1cfcd5a59813fe1da.
//
// Solidity: event FtsoAdded(address ftso, bool add)
func (_FM *FMFilterer) FilterFtsoAdded(opts *bind.FilterOpts) (*FMFtsoAddedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "FtsoAdded")
	if err != nil {
		return nil, err
	}
	return &FMFtsoAddedIterator{contract: _FM.contract, event: "FtsoAdded", logs: logs, sub: sub}, nil
}

// WatchFtsoAdded is a free log subscription operation binding the contract event 0xa0985424f2efdcae4b57a7c84bbf0a0b19f93054f21e9eb1cfcd5a59813fe1da.
//
// Solidity: event FtsoAdded(address ftso, bool add)
func (_FM *FMFilterer) WatchFtsoAdded(opts *bind.WatchOpts, sink chan<- *FMFtsoAdded) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "FtsoAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMFtsoAdded)
				if err := _FM.contract.UnpackLog(event, "FtsoAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFtsoAdded is a log parse operation binding the contract event 0xa0985424f2efdcae4b57a7c84bbf0a0b19f93054f21e9eb1cfcd5a59813fe1da.
//
// Solidity: event FtsoAdded(address ftso, bool add)
func (_FM *FMFilterer) ParseFtsoAdded(log types.Log) (*FMFtsoAdded, error) {
	event := new(FMFtsoAdded)
	if err := _FM.contract.UnpackLog(event, "FtsoAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMFtsoFallbackModeIterator is returned from FilterFtsoFallbackMode and is used to iterate over the raw logs and unpacked data for FtsoFallbackMode events raised by the FM contract.
type FMFtsoFallbackModeIterator struct {
	Event *FMFtsoFallbackMode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMFtsoFallbackModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMFtsoFallbackMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMFtsoFallbackMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMFtsoFallbackModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMFtsoFallbackModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMFtsoFallbackMode represents a FtsoFallbackMode event raised by the FM contract.
type FMFtsoFallbackMode struct {
	Ftso         common.Address
	FallbackMode bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterFtsoFallbackMode is a free log retrieval operation binding the contract event 0x24462ede4d3e8e5a69fecec6290d42a311016ca752216d9a3d681e284791b7ac.
//
// Solidity: event FtsoFallbackMode(address ftso, bool fallbackMode)
func (_FM *FMFilterer) FilterFtsoFallbackMode(opts *bind.FilterOpts) (*FMFtsoFallbackModeIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "FtsoFallbackMode")
	if err != nil {
		return nil, err
	}
	return &FMFtsoFallbackModeIterator{contract: _FM.contract, event: "FtsoFallbackMode", logs: logs, sub: sub}, nil
}

// WatchFtsoFallbackMode is a free log subscription operation binding the contract event 0x24462ede4d3e8e5a69fecec6290d42a311016ca752216d9a3d681e284791b7ac.
//
// Solidity: event FtsoFallbackMode(address ftso, bool fallbackMode)
func (_FM *FMFilterer) WatchFtsoFallbackMode(opts *bind.WatchOpts, sink chan<- *FMFtsoFallbackMode) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "FtsoFallbackMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMFtsoFallbackMode)
				if err := _FM.contract.UnpackLog(event, "FtsoFallbackMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFtsoFallbackMode is a log parse operation binding the contract event 0x24462ede4d3e8e5a69fecec6290d42a311016ca752216d9a3d681e284791b7ac.
//
// Solidity: event FtsoFallbackMode(address ftso, bool fallbackMode)
func (_FM *FMFilterer) ParseFtsoFallbackMode(log types.Log) (*FMFtsoFallbackMode, error) {
	event := new(FMFtsoFallbackMode)
	if err := _FM.contract.UnpackLog(event, "FtsoFallbackMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMGovernanceProposedIterator is returned from FilterGovernanceProposed and is used to iterate over the raw logs and unpacked data for GovernanceProposed events raised by the FM contract.
type FMGovernanceProposedIterator struct {
	Event *FMGovernanceProposed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMGovernanceProposedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMGovernanceProposed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMGovernanceProposed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMGovernanceProposedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMGovernanceProposedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMGovernanceProposed represents a GovernanceProposed event raised by the FM contract.
type FMGovernanceProposed struct {
	ProposedGovernance common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterGovernanceProposed is a free log retrieval operation binding the contract event 0x1f95fb40be3a947982072902a887b521248d1d8931a39eb38f84f4d6fd758b69.
//
// Solidity: event GovernanceProposed(address proposedGovernance)
func (_FM *FMFilterer) FilterGovernanceProposed(opts *bind.FilterOpts) (*FMGovernanceProposedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "GovernanceProposed")
	if err != nil {
		return nil, err
	}
	return &FMGovernanceProposedIterator{contract: _FM.contract, event: "GovernanceProposed", logs: logs, sub: sub}, nil
}

// WatchGovernanceProposed is a free log subscription operation binding the contract event 0x1f95fb40be3a947982072902a887b521248d1d8931a39eb38f84f4d6fd758b69.
//
// Solidity: event GovernanceProposed(address proposedGovernance)
func (_FM *FMFilterer) WatchGovernanceProposed(opts *bind.WatchOpts, sink chan<- *FMGovernanceProposed) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "GovernanceProposed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMGovernanceProposed)
				if err := _FM.contract.UnpackLog(event, "GovernanceProposed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceProposed is a log parse operation binding the contract event 0x1f95fb40be3a947982072902a887b521248d1d8931a39eb38f84f4d6fd758b69.
//
// Solidity: event GovernanceProposed(address proposedGovernance)
func (_FM *FMFilterer) ParseGovernanceProposed(log types.Log) (*FMGovernanceProposed, error) {
	event := new(FMGovernanceProposed)
	if err := _FM.contract.UnpackLog(event, "GovernanceProposed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMGovernanceUpdatedIterator is returned from FilterGovernanceUpdated and is used to iterate over the raw logs and unpacked data for GovernanceUpdated events raised by the FM contract.
type FMGovernanceUpdatedIterator struct {
	Event *FMGovernanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMGovernanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMGovernanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMGovernanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMGovernanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMGovernanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMGovernanceUpdated represents a GovernanceUpdated event raised by the FM contract.
type FMGovernanceUpdated struct {
	OldGovernance  common.Address
	NewGoveranance common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterGovernanceUpdated is a free log retrieval operation binding the contract event 0x434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d.
//
// Solidity: event GovernanceUpdated(address oldGovernance, address newGoveranance)
func (_FM *FMFilterer) FilterGovernanceUpdated(opts *bind.FilterOpts) (*FMGovernanceUpdatedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "GovernanceUpdated")
	if err != nil {
		return nil, err
	}
	return &FMGovernanceUpdatedIterator{contract: _FM.contract, event: "GovernanceUpdated", logs: logs, sub: sub}, nil
}

// WatchGovernanceUpdated is a free log subscription operation binding the contract event 0x434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d.
//
// Solidity: event GovernanceUpdated(address oldGovernance, address newGoveranance)
func (_FM *FMFilterer) WatchGovernanceUpdated(opts *bind.WatchOpts, sink chan<- *FMGovernanceUpdated) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "GovernanceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMGovernanceUpdated)
				if err := _FM.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceUpdated is a log parse operation binding the contract event 0x434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d.
//
// Solidity: event GovernanceUpdated(address oldGovernance, address newGoveranance)
func (_FM *FMFilterer) ParseGovernanceUpdated(log types.Log) (*FMGovernanceUpdated, error) {
	event := new(FMGovernanceUpdated)
	if err := _FM.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMInitializingCurrentEpochStateForRevealFailedIterator is returned from FilterInitializingCurrentEpochStateForRevealFailed and is used to iterate over the raw logs and unpacked data for InitializingCurrentEpochStateForRevealFailed events raised by the FM contract.
type FMInitializingCurrentEpochStateForRevealFailedIterator struct {
	Event *FMInitializingCurrentEpochStateForRevealFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMInitializingCurrentEpochStateForRevealFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMInitializingCurrentEpochStateForRevealFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMInitializingCurrentEpochStateForRevealFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMInitializingCurrentEpochStateForRevealFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMInitializingCurrentEpochStateForRevealFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMInitializingCurrentEpochStateForRevealFailed represents a InitializingCurrentEpochStateForRevealFailed event raised by the FM contract.
type FMInitializingCurrentEpochStateForRevealFailed struct {
	Ftso    common.Address
	EpochId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitializingCurrentEpochStateForRevealFailed is a free log retrieval operation binding the contract event 0x61156899176547b8075bfa81fa2996c6057ce9c71320884b11c0179d9dc2e462.
//
// Solidity: event InitializingCurrentEpochStateForRevealFailed(address ftso, uint256 epochId)
func (_FM *FMFilterer) FilterInitializingCurrentEpochStateForRevealFailed(opts *bind.FilterOpts) (*FMInitializingCurrentEpochStateForRevealFailedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "InitializingCurrentEpochStateForRevealFailed")
	if err != nil {
		return nil, err
	}
	return &FMInitializingCurrentEpochStateForRevealFailedIterator{contract: _FM.contract, event: "InitializingCurrentEpochStateForRevealFailed", logs: logs, sub: sub}, nil
}

// WatchInitializingCurrentEpochStateForRevealFailed is a free log subscription operation binding the contract event 0x61156899176547b8075bfa81fa2996c6057ce9c71320884b11c0179d9dc2e462.
//
// Solidity: event InitializingCurrentEpochStateForRevealFailed(address ftso, uint256 epochId)
func (_FM *FMFilterer) WatchInitializingCurrentEpochStateForRevealFailed(opts *bind.WatchOpts, sink chan<- *FMInitializingCurrentEpochStateForRevealFailed) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "InitializingCurrentEpochStateForRevealFailed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMInitializingCurrentEpochStateForRevealFailed)
				if err := _FM.contract.UnpackLog(event, "InitializingCurrentEpochStateForRevealFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitializingCurrentEpochStateForRevealFailed is a log parse operation binding the contract event 0x61156899176547b8075bfa81fa2996c6057ce9c71320884b11c0179d9dc2e462.
//
// Solidity: event InitializingCurrentEpochStateForRevealFailed(address ftso, uint256 epochId)
func (_FM *FMFilterer) ParseInitializingCurrentEpochStateForRevealFailed(log types.Log) (*FMInitializingCurrentEpochStateForRevealFailed, error) {
	event := new(FMInitializingCurrentEpochStateForRevealFailed)
	if err := _FM.contract.UnpackLog(event, "InitializingCurrentEpochStateForRevealFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMPriceEpochFinalizedIterator is returned from FilterPriceEpochFinalized and is used to iterate over the raw logs and unpacked data for PriceEpochFinalized events raised by the FM contract.
type FMPriceEpochFinalizedIterator struct {
	Event *FMPriceEpochFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMPriceEpochFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMPriceEpochFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMPriceEpochFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMPriceEpochFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMPriceEpochFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMPriceEpochFinalized represents a PriceEpochFinalized event raised by the FM contract.
type FMPriceEpochFinalized struct {
	ChosenFtso    common.Address
	RewardEpochId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPriceEpochFinalized is a free log retrieval operation binding the contract event 0x98b050a4042fbd1b89934ef40b9342e593f15081a348af940573a0179031f4ad.
//
// Solidity: event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId)
func (_FM *FMFilterer) FilterPriceEpochFinalized(opts *bind.FilterOpts) (*FMPriceEpochFinalizedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "PriceEpochFinalized")
	if err != nil {
		return nil, err
	}
	return &FMPriceEpochFinalizedIterator{contract: _FM.contract, event: "PriceEpochFinalized", logs: logs, sub: sub}, nil
}

// WatchPriceEpochFinalized is a free log subscription operation binding the contract event 0x98b050a4042fbd1b89934ef40b9342e593f15081a348af940573a0179031f4ad.
//
// Solidity: event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId)
func (_FM *FMFilterer) WatchPriceEpochFinalized(opts *bind.WatchOpts, sink chan<- *FMPriceEpochFinalized) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "PriceEpochFinalized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMPriceEpochFinalized)
				if err := _FM.contract.UnpackLog(event, "PriceEpochFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceEpochFinalized is a log parse operation binding the contract event 0x98b050a4042fbd1b89934ef40b9342e593f15081a348af940573a0179031f4ad.
//
// Solidity: event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId)
func (_FM *FMFilterer) ParsePriceEpochFinalized(log types.Log) (*FMPriceEpochFinalized, error) {
	event := new(FMPriceEpochFinalized)
	if err := _FM.contract.UnpackLog(event, "PriceEpochFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FMRewardEpochFinalizedIterator is returned from FilterRewardEpochFinalized and is used to iterate over the raw logs and unpacked data for RewardEpochFinalized events raised by the FM contract.
type FMRewardEpochFinalizedIterator struct {
	Event *FMRewardEpochFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FMRewardEpochFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FMRewardEpochFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FMRewardEpochFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FMRewardEpochFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FMRewardEpochFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FMRewardEpochFinalized represents a RewardEpochFinalized event raised by the FM contract.
type FMRewardEpochFinalized struct {
	VotepowerBlock *big.Int
	StartBlock     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRewardEpochFinalized is a free log retrieval operation binding the contract event 0x1813f880dc24666c8b69c9d771a487ea620a27fde1514be3112847056c0c5322.
//
// Solidity: event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock)
func (_FM *FMFilterer) FilterRewardEpochFinalized(opts *bind.FilterOpts) (*FMRewardEpochFinalizedIterator, error) {

	logs, sub, err := _FM.contract.FilterLogs(opts, "RewardEpochFinalized")
	if err != nil {
		return nil, err
	}
	return &FMRewardEpochFinalizedIterator{contract: _FM.contract, event: "RewardEpochFinalized", logs: logs, sub: sub}, nil
}

// WatchRewardEpochFinalized is a free log subscription operation binding the contract event 0x1813f880dc24666c8b69c9d771a487ea620a27fde1514be3112847056c0c5322.
//
// Solidity: event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock)
func (_FM *FMFilterer) WatchRewardEpochFinalized(opts *bind.WatchOpts, sink chan<- *FMRewardEpochFinalized) (event.Subscription, error) {

	logs, sub, err := _FM.contract.WatchLogs(opts, "RewardEpochFinalized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FMRewardEpochFinalized)
				if err := _FM.contract.UnpackLog(event, "RewardEpochFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardEpochFinalized is a log parse operation binding the contract event 0x1813f880dc24666c8b69c9d771a487ea620a27fde1514be3112847056c0c5322.
//
// Solidity: event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock)
func (_FM *FMFilterer) ParseRewardEpochFinalized(log types.Log) (*FMRewardEpochFinalized, error) {
	event := new(FMRewardEpochFinalized)
	if err := _FM.contract.UnpackLog(event, "RewardEpochFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
